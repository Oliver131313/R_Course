help mean
? mean
rm(list = ls())
load(file = "hw01.RData")
mean_income <- mean(0,05)
mean_income <- mean(x = x, 0.05)
mean_income <- mean(x = income, 0.05)
mean_income <- mean(x = income, 0.05, na.rm = TRUE)
mean_income <- mean(x = income, trim = c(0.05, 0.95) na.rm = TRUE)
mean_income <- mean(x = income, trim=0.05, na.rm = TRUE)
# edit only the following line:
mean_income <- mean(x = x, 0.05)
# edit only the following line:
mean_income <- mean(x = income, trim=0.05, na.rm = FALSE)
# edit only the following line:
mean_income <- mean(x = income, trim=0.05, na.rm = TRUE)
# edit only the following line:
mean_income <- mean(x = income,  na.rm = TRUE)
# Homework: introduction into R
# =============================
# Goal: use RStudio to write the first R script
# reading documentation for mean function needed
# clear workspace
rm(list = ls())
# read numeric vector income from current directory
load(file = "hw01.RData")
# edit only the following line:
mean_income <- mean(x = income, trim=0.25 na.rm = TRUE)
# save mean_income to current directory
save(mean_income, file = "results.RData")
# edit only the following line:
mean_income <- mean(x = income, trim=0.25 na.rm = TRUE)
# edit only the following line:
mean_income <- mean(x = income, trim=0.025 na.rm = TRUE)
# edit only the following line:
mean_income <- mean(x = income, trim=0.025, na.rm = TRUE)
data.matrix()
class(data.matrix)
data.matrix(nrow=100, ncol=10)
matrix(nrow=100, ncol=10)
# Matrix: 10 samples and 100 observations
data.matrix <- matrix(nrow=100, ncol=10)
data.matrix
? paste()
# Tutorial on how to do a PCA in R
# Matrix: 10 samples and 100 observations
matrix_data <- matrix(nrow = 100, ncol = 10)
# Colnames
colnames(matrix_data) <- c(+paste("wt", 1:5, sep = ""),
+paste("ko", 1:5, sep = ""))
# Tutorial on how to do a PCA in R
# Matrix: 10 samples and 100 observations
matrix_data <- matrix(nrow = 100, ncol = 10)
# Colnames
colnames(matrix_data) <- c(paste("wt", 1:5, sep = ""),
paste("ko", 1:5, sep = ""))
matrix_data
? rpois
? rpois()
? sample
matrix_data.wt
# Tutorial on how to do a PCA in R
# Matrix: 10 samples and 100 observations
matrix_data <- matrix(nrow = 100, ncol = 10)
# Colnames - WT (Wild Type); KO (Missing in genes)
colnames(matrix_data) <- c(paste("wt", 1:5, sep = ""),
paste("ko", 1:5, sep = ""))
# Rownames
rownames(matrix_data) <- paste("gene", 1:100, sep="")
# Generate data
for (i in 1:100) {wt.values <- rpois(5, lambda=sample(x=10:1000, size=1))
ko.values <- rpois(5, lambda=sample(x=10:1000, size=1)))
matrix_data[i, ] <- c(wt.values, ko.values)}
# Tutorial on how to do a PCA in R
# Matrix: 10 samples and 100 observations
matrix_data <- matrix(nrow = 100, ncol = 10)
# Colnames - WT (Wild Type); KO (Missing in genes)
colnames(matrix_data) <- c(paste("wt", 1:5, sep = ""),
paste("ko", 1:5, sep = ""))
# Rownames
rownames(matrix_data) <- paste("gene", 1:100, sep = "")
# Generate data
for (i in 1:100) {
wt.values <- rpois(5, lambda = sample(x = 10:1000, size = 1))
ko.values <- rpois(5, lambda = sample(x = 10:1000, size = 1))
matrix_data[i,] <- c(wt.values, ko.values)
}
matrix_data.wt
rpois(5, lambda = sample(x = 10:1000, size = 1)
rpois(5, lambda = sample(x = 10:1000, size = 1))
rpois(5, lambda = sample(x = 10:1000, size = 1))
print(head(matrix_data))
source("C:/Users/kutis/OneDrive/Programming/R/PCA.R", echo=TRUE)
PCA
# Tutorial on how to do a PCA in R
# Matrix: 10 samples and 100 observations
matrix_data <- matrix(nrow = 100, ncol = 10)
# Colnames - WT (Wild Type); KO (Missing in genes)
colnames(matrix_data) <- c(paste("wt", 1:5, sep = ""),
paste("ko", 1:5, sep = ""))
# Rownames
rownames(matrix_data) <- paste("gene", 1:100, sep = "")
# Generate data - rpois gives 5 values from poisson distribution which lambda is random
# sample from 10:1000
# 5 values because we have five wts and 5 kos
# Then data are added to the matrix for each row i
for (i in 1:100) {
wt.values <- rpois(5, lambda = sample(x = 10:1000, size = 1))
ko.values <- rpois(5, lambda = sample(x = 10:1000, size = 1))
matrix_data[i,] <- c(wt.values, ko.values)
}
print(head(matrix_data))
# prcomp() - makes PCA for our data and returns:
# >> stdev - st. deviations of our PCs
# >> rotation - matrix of variable loadins (matrix whose columns contain eigenvectors)
# >> x - the value of the rotated data
# We transpoze the data because the observations (samples) should be in columns and
#  gene types should be in rows
PCA <- prcomp(t(matrix_data), scale=TRUE)
plot(PCA$x[, 1], PCA$x[, 2])
PCA.var
# Tutorial on how to do a PCA in R
# Matrix: 10 samples and 100 observations
matrix_data <- matrix(nrow = 100, ncol = 10)
# Colnames - WT (Wild Type); KO (Missing in genes)
colnames(matrix_data) <- c(paste("wt", 1:5, sep = ""),
paste("ko", 1:5, sep = ""))
# Rownames
rownames(matrix_data) <- paste("gene", 1:100, sep = "")
# Generate data - rpois gives 5 values from poisson distribution which lambda is random
# sample from 10:1000
# 5 values because we have five wts and 5 kos
# Then data are added to the matrix for each row i
for (i in 1:100) {
wt.values <- rpois(5, lambda = sample(x = 10:1000, size = 1))
ko.values <- rpois(5, lambda = sample(x = 10:1000, size = 1))
matrix_data[i,] <- c(wt.values, ko.values)
}
print(head(matrix_data))
# prcomp() - makes PCA for our data and returns:
# >> stdev - st. deviations of our PCs
# >> rotation - matrix of variable loadins (matrix whose columns contain eigenvectors)
# >> x - the value of the rotated data
# We transpoze the data because the observations (samples) should be in columns and
#  gene types should be in rows
PCA <- prcomp(t(matrix_data), scale=TRUE)
plot(PCA$x[, 1], PCA$x[, 2]) # First 2 PCs (PC1 is always the PC which contains the
# the most variation in the data...PC2 is the second etc.)
pca.var
source("C:/Users/kutis/OneDrive/Programming/R/PCA.R", echo=TRUE)
# Tutorial on how to do a PCA in R
# Matrix: 10 samples and 100 observations
matrix_data <- matrix(nrow = 100, ncol = 10)
# Colnames - WT (Wild Type); KO (Missing in genes)
colnames(matrix_data) <- c(paste("wt", 1:5, sep = ""),
paste("ko", 1:5, sep = ""))
# Rownames
rownames(matrix_data) <- paste("gene", 1:100, sep = "")
# Generate data - rpois gives 5 values from poisson distribution which lambda is random
# sample from 10:1000
# 5 values because we have five wts and 5 kos
# Then data are added to the matrix for each row i
for (i in 1:100) {
wt.values <- rpois(5, lambda = sample(x = 10:1000, size = 1))
ko.values <- rpois(5, lambda = sample(x = 10:1000, size = 1))
matrix_data[i,] <- c(wt.values, ko.values)
}
print(head(matrix_data))
# prcomp() - makes PCA for our data and returns:
# >> stdev - st. deviations of our PCs
# >> rotation - matrix of variable loadins (matrix whose columns contain eigenvectors)
# >> x - the value of the rotated data
# We transpoze the data because the observations (samples) should be in columns and
#  gene types should be in rows
pca <- prcomp(t(matrix_data), scale=TRUE)
plot(pca$x[, 1], pca$x[, 2]) # First 2 PCs (PC1 is always the PC which contains the
# the most variation in the data...PC2 is the second etc.)
# Variance of the PCs
pca.var <- pca$stdev^2
# % of variation each PC accounts for
pca.var.per <- round(pca.var / sum(pca.var)*100, 1)
# Scree plot
barplot(pca.var.per, main="Scree Plot", xlab="PC", ylab="Percent Variation")
pca.var.per
pca.var
pca$stdev^2
prcomp(t(matrix_data), scale=TRUE)
plot(pca$x[, 1], pca$x[, 2])
# Variance of the PCs
pca.var <- pca$stdev^2
pca.var
source("C:/Users/kutis/OneDrive/Programming/R/PCA.R", echo=TRUE)
? dist
setwd("C:/Users/kutis/OneDrive/School/1. Semester/AnalÃ½za a vizualizace ekonomickych dat v R/03_c/du")
# Homework: datasets, factors, and the like
# =========================================
# Goal: use tibbles and factors
# clear workspace
rm(list = ls())
# load necessary libraries
library(tibble)
# load the data needed
load("hw03.RData")
# 1. in dataset modal_split: keep only rows where vehicle is TRN and the data are not
#    older than 2004-01-01; remove the rest
modal_split <-
modal_split[(modal_split$vehicle == "TRN") &
(modal_split$time >= '2004-01-01'), ]
save(modal_split, file = "results.RData")
# make no changes in modal_split beyond this line!!!
# 2. in dataset train_total: keep only rows where units are MIO_PKM; remove the rest
train_total <- train_total[train_total$unit == "MIO_PKM",]
save(modal_split, train_total, file = "results.RData")
# make no changes in train_total beyond this line!!!
#    train_volume, and transit_volume
transit1 <-
tibble(
time = train_total$time,
train_share = modal_split$values,
train_volume = train_total$values,
transit_volume = train_volume / (train_share/100)
)
save(modal_split, train_total, transit1, file = "results.RData")
# make no changes in transit1
print(transit1)
# =========================================
# Goal: use tibbles and factors
# clear workspace
rm(list = ls())
# load necessary libraries
library(tibble)
# load the data needed
load("hw03.RData")
# 1. in dataset modal_split: keep only rows where vehicle is TRN and the data are not
#    older than 2004-01-01; remove the rest
modal_split <-
modal_split[(modal_split$vehicle == "TRN") &
(modal_split$time >= '2004-01-01'), ]
save(modal_split, file = "results.RData")
# make no changes in modal_split beyond this line!!!
# 2. in dataset train_total: keep only rows where units are MIO_PKM; remove the rest
train_total <- train_total[train_total$unit == "MIO_PKM",]
save(modal_split, train_total, file = "results.RData")
# make no changes in train_total beyond this line!!!
# 3. create new (tibble) dataset transit with the following variables: time, train_share,
#    train_volume, and transit_volume
transit1 <-
tibble(
time = train_total$time,
train_share = modal_split$values,
train_volume = train_total$values,
transit_volume = train_volume / (train_share/100)
)
save(modal_split, train_total, transit1, file = "results.RData")
transit1
transit2 <- transit1[order(transit1$time), ]
save(modal_split, train_total, transit1, transit2, file = "results.RData")
# make no changes in transit2
transit2
tv_t <- transit2$transit_volume[-1]
# transit_volume in t-1
tv_t0 <- transit2$$transit_volume[-nrow(transit2)]
tv_growth <- (tv_t/tv_t0 - 1) * 100
tv_t <- transit2$transit_volume[-1]
# transit_volume in t-1
tv_t0 <- transit2$transit_volume[-nrow(transit2)]
tv_growth <- (tv_t/tv_t0 - 1) * 100
transit3 <- as_tibble(transit2)
tracemem(transit2) == tracemem(transit3)
transit3 <- transit2
tracemem(transit2) == tracemem(transit3)
c(NA_real_, tv_growth)
transit3$transit_growth <- c(NA_real_, tv_growth)
transit3
# Homework: datasets, factors, and the like
# =========================================
# Goal: use tibbles and factors
# clear workspace
rm(list = ls())
# load necessary libraries
library(tibble)
# load the data needed
load("hw03.RData")
# 1. in dataset modal_split: keep only rows where vehicle is TRN and the data are not
#    older than 2004-01-01; remove the rest
modal_split <-
modal_split[(modal_split$vehicle == "TRN") &
(modal_split$time >= '2004-01-01'), ]
save(modal_split, file = "results.RData")
# make no changes in modal_split beyond this line!!!
# 2. in dataset train_total: keep only rows where units are MIO_PKM; remove the rest
train_total <- train_total[train_total$unit == "MIO_PKM",]
save(modal_split, train_total, file = "results.RData")
# make no changes in train_total beyond this line!!!
# 3. create new (tibble) dataset transit with the following variables: time, train_share,
#    train_volume, and transit_volume
transit1 <-
tibble(
time = train_total$time,
train_share = modal_split$values,
train_volume = train_total$values,
transit_volume = train_volume / (train_share/100)
)
save(modal_split, train_total, transit1, file = "results.RData")
# make no changes in transit1
# 4. sort transit dataset so that the first row is for 2004, the second for 2005, etc.
transit2 <- transit1[order(transit1$time), ]
save(modal_split, train_total, transit1, transit2, file = "results.RData")
# make no changes in transit2
# 5.  add transit_growth variable to the dataset transit
# transit_volume in t
tv_t <- transit2$transit_volume[-1]
# transit_volume in t-1
tv_t0 <- transit2$transit_volume[-nrow(transit2)]
tv_growth <- (tv_t/tv_t0 - 1) * 100
# Copy of transit2, so the memory adresses aren't the same because if they were,
# changes made to transit3 would also change transit2
# It can verified using tracemem(transit2) == tracemem(transit3)
transit3 <- as_tibble(transit2)
# Create new columns and fill it with NAs of type 'double' (NA_real_)
transit3$transit_growth <- c(NA_real_, tv_growth)
# Since first year couldn't see any growth, we will leave an NA there
#transit3[2:nrow(transit3), "transit_growth"] <-
save(modal_split, train_total, transit1, transit2, transit3, file = "results.RData")
View(transit3)
View(transit3)
