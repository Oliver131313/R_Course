else if (spravne >= so)
spravil <- TRUE
}
return(spravil)
}
# call
S <- 10000
vysledok <- 0
for (s in 1:10000) {
vysledok <- vysledok + testy()
}
freq <- vysledok / S
print(freq)
## Mam to spravne, ale da sa to spravit omnhoo efektivnejsie - UCITELOVO RIESENIE
jeden_test <- function(otazek)
sum(sample(0:1, size = otazek, replace = TRUE, prob = c(3/4, 1/4)))
# pomocí starého replicate()
testy <- function(otazek, opakovani)
max(replicate(opakovani, jeden_test(otazek)))
# totéž pomocí purrr
testy <- function(otazek, opakovani)
max(map_int(seq_len(opakovani), ~jeden_test(otazek)))
# mean(replicate(1e4, testy(50, 3)) >= 30)  # pomocí starého replicate
freq <- mean(map(1:1e4, ~testy(50, 3)) >= 30)  # totéž pomocí purrr
print(freq)
# Ukol 2
jeden_test <- function(otazek, pozna)
sum(sample(0:1, size = otazek, replace = TRUE, prob = c(3/4, 1/4))) + pozna
# ! Pozor musel som zmenit map_int na map_dbl lebo to robilo problemy !
testy <- function(otazek, opakovani, pozna)
max(map_dbl(seq_len(opakovani), ~jeden_test(otazek, pozna)))
# Simuluj
pozna_o <- function(otazek, opakovani, pozna, n=1:1e4)
#mean(map(n, ~testy(otazek, opakovani, pozna)) >= 30L)
mean(replicate(n, testy(otazek, opakovani, pozna)) >= 30)
pozna_seq <- 0:50
pozna_p <- map_dbl(pozna_seq, ~pozna_o(50, 3, .))
plot(pozna_seq, pozna_p, type="l")
# Ukol 3 mozno preskocit je tazky ale vyskusat tu nemecku picovinu!
print(min(pozna_seq[pozna_p >= 0.05]))
print(min(pozna_seq[pozna_p >= 0.5]))
jeden_test <- function(otazek, pozna)
sum(sample(0:1, size = otazek, replace = TRUE, prob = c(3/4, 1/4))) +
as.numeric(pozna)
# ! Pozor musel som zmenit map_int na map_dbl lebo to robilo problemy !
testy <- function(otazek, opakovani, pozna)
max(map_dbl(seq_len(opakovani), ~jeden_test(otazek, pozna)))
# Simuluj
pozna_o <- function(otazek, opakovani, pozna, n=1:1e4)
#mean(map(n, ~testy(otazek, opakovani, pozna)) >= 30L)
mean(replicate(n, testy(otazek, opakovani, pozna)) >= 30)
pozna_seq <- 0:50
pozna_p <- map_dbl(pozna_seq, ~pozna_o(50, 3, .))
plot(pozna_seq, pozna_p, type="l")
sum(sample(0:1, size = otazek, replace = TRUE, prob = c(3/4, 1/4))) +
as.integer(pozna)
jeden_test <- function(otazek, pozna)
sum(sample(0:1, size = otazek, replace = TRUE, prob = c(3/4, 1/4))) +
as.integer(pozna)
# ! Pozor musel som zmenit map_int na map_dbl lebo to robilo problemy !
testy <- function(otazek, opakovani, pozna)
max(map_dbl(seq_len(opakovani), ~jeden_test(otazek, pozna)))
# Simuluj
pozna_o <- function(otazek, opakovani, pozna, n=1:1e4)
#mean(map(n, ~testy(otazek, opakovani, pozna)) >= 30L)
mean(replicate(n, testy(otazek, opakovani, pozna)) >= 30)
pozna_seq <- 0:50
pozna_p <- map_dbl(pozna_seq, ~pozna_o(50, 3, .))
plot(pozna_seq, pozna_p, type="l")
jeden_test <- function(otazek, zna)
sum(sample(0:1, size = otazek - zna, replace = TRUE, prob = c(3/4, 1/4))) +
as.integer(zna)
testy <- function(otazek, opakovani, zna)
max(map_int(seq_len(opakovani), ~jeden_test(otazek, zna)))
prst_uspechu <- function(otazek, opakovani, zna, N = 1e4)
mean(replicate(N, testy(otazek, opakovani, zna)) >= 30)
zna <- 0:50
prst <- map_dbl(zna, ~prst_uspechu(50, 3, .))
plot(zna, prst, type = "l"
jeden_test <- function(otazek, pozna)
sum(sample(0:1, size = otazek, replace = TRUE, prob = c(3/4, 1/4))) +
as.integer(pozna)
# ! Pozor musel som zmenit map_int na map_dbl lebo to robilo problemy !
testy <- function(otazek, opakovani, pozna)
max(map_dbl(seq_len(opakovani), ~jeden_test(otazek, pozna)))
# Simuluj
pozna_o <- function(otazek, opakovani, pozna, n=1e4)
#mean(map(n, ~testy(otazek, opakovani, pozna)) >= 30L)
mean(replicate(n, testy(otazek, opakovani, pozna)) >= 30)
pozna_seq <- 0:50
pozna_p <- map_dbl(pozna_seq, ~pozna_o(50, 3, .))
plot(pozna_seq, pozna_p, type="l")
print(min(pozna_seq[pozna_p >= 0.05]))
print(min(pozna_seq[pozna_p >= 0.5]))
# Ukol 3 mozno preskocit je tazky ale vyskusat tu nemecku picovinu!
print(min(pozna_seq[pozna_p >= 0.05]))
print(min(pozna_seq[pozna_p >= 0.5]))
########################################################################################
#                                   Total Brutal
df
data("mpg", package == "ggplot2")
# Ukol 1
library(ggplot2)
library(purrr)
data("mpg", package == "ggplot2")
data("diamonds")
? data
ggplot2::ggplot(mtcars, ggplot2::aes(wt, mpg)) + ggplot2::geom_point()
install.packages
packages()
packageStatus()
packageVersion()
packageVersion("ggplot2")
data("mpg")
data("mpg", package="ggplot2")
library(ggplot2)
data("mpg", package="ggplot2")
mpg
col(mpg)
names(mpg)
? map
? mapply(function, ...)
? map()
map(mean, c(1, 2, 3))
# Ukol 1
totez <- function(x)
x
print(totez(5))
print(totez(c(1, 2, 3)))
# Ukol 2
root <- function(x, n = 2) {
x ^ (1 / n)
}
print(root(16))
# Ukol 3
s <- list(1, 1:2, 1:3, 1:4, 1:5)
#  alebo - zadaj x, aplikuj funkciu tak aby tvoril 1:1, 1:2, 1:3,...
s <- map(1:5, function(x)
, 1:x) # purr
#  alebo - robi to iste co to predtym (. je povolene meno premennej)
s <- map(1:5, ~ 1:.)
v <- map_dbl(s, mean) # map_dbl s balika purr
print(v)
# Ukol 4
Sign <- function(x) {
if (x > 0)
1
else if (x == 0)
0
else
- 1
}
print(Sign(-10))
print(Sign(1))
print(Sign(0))
# Ukol 5
rand_vekt <- map(1:5, ~ runif(10)))
print(rand_vekt)
####################################################################
####################################################################
#                       Hratky s funkcemi
# Ukol 1
vekt <- function(n) {
if (is.numeric(n) && length(n) == 1 && round(n) == n && n > 0)
1:n
else
NA
}
print(vekt(5))
print(vekt(0))
# Ukol 2
nmax <- function(x, n = 1) {
stopifnot(is.numeric(x),
is.numeric(n),
length(n) == 1,
round(n) == n,
n > 0)
sort(unique(x), decreasing = TRUE)[n]
}
print(nmax(1:5, 2))
print(nmax(1:10))
print(nmax(1:10, c(1, 2)))
##################################################################
##################################################################
#                           Iterace
# Ukol 1
library(purrr)
library(ggplot2)
data("mpg", package = "ggplot2")
print(map_chr(mpg, class))
print(map_int(mpg, ~ sum(is.na(.))))
##################################################################
#                       Nemecka picovina
# Ukol 1
testy <- function(o = 50,
so = 30,
pok = 3) {
spravil <- FALSE
n <- 0
while (spravil != 1 && n != pok) {
odpovede <- sample(
x = c(0, 1),
size = o,
prob = c(3 / 4, 1 / 4),
replace = TRUE
)
spravne <- sum(odpovede)
if (spravne < so) {
spravil <- FALSE
n <- n + 1
}
else if (spravne >= so)
spravil <- TRUE
}
return(spravil)
}
# call
S <- 10000
vysledok <- 0
for (s in 1:10000) {
vysledok <- vysledok + testy()
}
freq <- vysledok / S
print(freq)
## Mam to spravne, ale da sa to spravit omnhoo efektivnejsie - UCITELOVO RIESENIE
jeden_test <- function(otazek)
sum(sample(
0:1,
size = otazek,
replace = TRUE,
prob = c(3 / 4, 1 / 4)
))
# pomocí starého replicate()
testy <- function(otazek, opakovani)
max(replicate(opakovani, jeden_test(otazek)))
# totéž pomocí purrr
testy <- function(otazek, opakovani)
max(map_int(seq_len(opakovani), ~ jeden_test(otazek)))
# mean(replicate(1e4, testy(50, 3)) >= 30)  # pomocí starého replicate
freq <- mean(map(1:1e4, ~ testy(50, 3)) >= 30)  # totéž pomocí purrr
print(freq)
# Ukol 2
jeden_test <- function(otazek, pozna)
sum(sample(
0:1,
size = otazek,
replace = TRUE,
prob = c(3 / 4, 1 / 4)
)) +
as.integer(pozna)
# ! Pozor musel som zmenit map_int na map_dbl lebo to robilo problemy !
testy <- function(otazek, opakovani, pozna)
max(map_dbl(seq_len(opakovani), ~ jeden_test(otazek, pozna)))
# Simuluj
pozna_o <- function(otazek, opakovani, pozna, n = 1e4)
mean(map(n, ~ testy(otazek, opakovani, pozna)) >= 30L)
#mean(replicate(n, testy(otazek, opakovani, pozna)) >= 30)
pozna_seq <- 0:50
pozna_p <- map_dbl(pozna_seq, ~ pozna_o(50, 3, .))
plot(pozna_seq, pozna_p, type = "l")
# Ukol 3
print(min(pozna_seq[pozna_p >= 0.05]))
print(min(pozna_seq[pozna_p >= 0.5]))
########################################################################################
#                                   Total Brutal
info_vector <- function(vec, what) {
map(what, vec)
}
? map
map(mean, c(c(1,2,3), c(4, 5,6)))
map(c(c(1,2,3), c(4, 5,6)), ~mean)
map(c(c(1,2,3), c(4, 5,6)), ~mean(.))
map(c(c(1,2,3), c(4, 5,6)), ~c(mean(.), median(.))
pri
map(c(c(1,2,3), c(4, 5,6)), ~c(mean(.), median(.)))
list(mean, median)
f <- list(mean, meadian)
f <- list(mean, median)
map(list, ~.(c(1, 2, 3)))
print(f(vec))
vec <- c(1, 2, 3)
for (f in what){
print(f(vec))
}
what <- list(mean, median)
vec <- c(1, 2, 3)
for (f in what){
print(f(vec))
}
info_vector <- function(vec, what) {
vecout <- c()
for (f in what) {
append(vecout, f(vec))
}
return(vecout)
}
info_vector(c(1, 2, 3), list(mean, median))
what <- list(mean, median)
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
append(vecout, f(vec))
}
vecout
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
}
what <- list(mean, median)
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
vecout <- c(vecout, vec)
}
vecout
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
vecout <- c(vecout, f(vec))
}
vecout
info_vector <- function(vec, what) {
vecout <- c()
for (f in what) {
vecout <- c(vecout, f(vec))
}
return(vecout)
}
info_vector(c(1, 2, 3), list(mean, median))
map(names(mpg), info_vector(mpg$., what))
map(names(mpg), ~info_vector(mpg$., what))
map(names(mpg), ~info_vector(mpg$x, what))
med_col <- c()
for (col in names(mpg)) {
c(med_col, info_vector(mpg$col, list(median))
}
med_col <- c()
for (col in names(mpg)) {
c(med_col, info_vector(mpg$col, list(median)))
}
med_col
class(mpg$manufacturer)
mpg$manufacturer
class(as.vecto(mpg$manufacturer))
class(as.vector(mpg$manufacturer))
class(c(1, 2, 3))
is.vector(as.vector(mpg$manufacturer))
med_col <- c()
for (col in names(mpg)) {
print(c(med_col, info_vector(mpg$col, list(median))))
}
med_col <- c()
for (col in names(mpg)) {
print(c(med_col, info_vector(mpg$col, list(mean, median))))
}
med_col <- c()
for (col in names(mpg)) {
if (class(mpg$col) == "character")
print(c(med_col, NA))
else
print(c(med_col, info_vector(mpg$col, list(mean, median))))
}
? rep
? dplyr::bind_rows
info <- function(df, ...) {
info_vector <- function(vec, what) {
if (!is.numeric(vec))
return(rep(NA_real_, length(what)))
else
map_dbl(what, ~.(vec))
}
print(map(df, info_vector, what))
what <- list(...)
res <- dplyr::bind_rows(map(df, info_vector, what))
tibble::as_tibble(cbind(stat = names(what), res))
}
print(map(df, info_vector, what))
info_vector <- function(vec, what) {
if (!is.numeric(vec))
return(rep(NA_real_, length(what)))
else
map_dbl(what, ~.(vec))
}
info(mpg, what=list(mean, median, modus))
info(mpg, what=list(mean, median))
View(what)
View(what)
View(mpg)
View(mpg)
# Homework: function, control structures, and iteration
# =====================================================
# Goal: read and write data from / to files
# clear workspace
rm(list = ls())
# 1. load necessary libraries
library(readr)
# 2. load the data
mpg <-
read_delim(
"hw05.csv",
delim = ":",
escape_double = FALSE,
col_types = cols(
displ = col_double(),
year = col_integer(),
cyl = col_integer(),
cty = col_double(),
hwy = col_double(),
class = col_factor(
levels = c(
"compact",
"midsize",
"suv",
"2seater",
"minivan",
"pickup",
"subcompact"
)
)
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
setwd("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/05_c/du")
# Homework: function, control structures, and iteration
# =====================================================
# Goal: read and write data from / to files
# clear workspace
rm(list = ls())
# 1. load necessary libraries
library(readr)
# 2. load the data
mpg <-
read_delim(
"hw05.csv",
delim = ":",
escape_double = FALSE,
col_types = cols(
displ = col_double(),
year = col_integer(),
cyl = col_integer(),
cty = col_double(),
hwy = col_double(),
class = col_factor(
levels = c(
"compact",
"midsize",
"suv",
"2seater",
"minivan",
"pickup",
"subcompact"
)
)
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
mpg
# Homework: function, control structures, and iteration
# =====================================================
# Goal: read and write data from / to files
# clear workspace
rm(list = ls())
# 1. load necessary libraries
library(readr)
# 2. load the data
mpg <-
read_delim(
"hw05.csv",
delim = ":",
escape_double = FALSE,
col_types = cols(
manufacturer = col_character(),
model = col_character(),
displ = col_double(),
year = col_integer(),
cyl = col_integer(),
trans = col_character(),
drv = col_character(),
cty = col_double(),
hwy = col_double(),
fl = col_character(),
class = col_factor(
levels = c(
"compact",
"midsize",
"suv",
"2seater",
"minivan",
"pickup",
"subcompact"
)
)
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
save(mpg, file = "results.RData")
# 3. calculate the correlation
mpg_cty_cor <- cor(x = mpg$displ,
y = mpg$cty,
use = "complete.obs")
# 4. save the data into results.RData
save(mpg, mpg_cty_cor, file = "results.RData")
mpg
head(mpg, 30)
View(mpg)
View(mpg)
