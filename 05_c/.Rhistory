}
alpha_df(experiment, experiment$id, experiment$pstar)
unique(experiment$pstar)
alpha(experiment$pstar[[1]], experiment[experiment$pstar==experiment$pstar[[1]], "p"])
experiment$pstar[[1]]
experiment[experiment$pstar == experiment$pstar[[1]]
alpha(experiment$pstar[[1]], experiment[experiment$pstar == experiment$pstar[[1]]])
alpha(experiment$pstar[[1]], experiment[experiment$pstar == experiment$pstar[[1]]])
alpha(experiment$pstar[[1]], experiment[experiment$pstar == experiment$pstar[[1]], "p"])
experiment[experiment$pstar == experiment$pstar[[1]], "p"]
alpha(experiment$pstar[[1]], experiment[experiment$pstar == experiment$pstar[[1]], "p"][1])
experiment[experiment$pstar == experiment$pstar[[1]], "p"][1]
as.array(experiment[experiment$pstar == experiment$pstar[[1]], "p"][1])
pull(experiment, "p")
alpha(experiment$pstar[[1]], pull(experiment[experiment$pstar == experiment$pstar[[1]], "p"], "p"))
# 2. create function alpha_df(df, id)
library(dplyr)
alpha_df <- function(df, ids, pstars) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(pstars)
map(pstars, ~alpha(., pull(df[df$pstar==., "p"], "p")))
}
alpha_df(experiment, experiment$id, experiment$pstar)
library(dplyr)
alpha_df <- function(df, ids) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(df$pstars)
map(pstars, ~alpha(., pull(df[df$pstar==., "p"], "p")))
}
alpha_df(experiment, experiment$id, experiment$pstar)
# 2. create function alpha_df(df, id)
library(dplyr)
alpha_df <- function(df, ids) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map(pstars, ~alpha(., pull(df[df$pstar==., "p"], "p")))
}
alpha_df(experiment, experiment$id)
alphas <- alpha_df(experiment, experiment$id)
alphas
alpha_df <- function(df, ids) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., pull(df[df$pstar==., "p"], "p")))
}
alphas <- alpha_df(experiment, experiment$id)
alphas
? pull
pull(experiment$p)
pull(experiment$p, "p")
class(experiement$p)
class(experiment$p)
is.vector(experiement$p)
is.vector(experiment$p)
library(dplyr)
alpha_df <- function(df, ids) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
# 4. create vector alphas
alphas <- alpha_df(experiment, experiment$id)
alphas
alphas <- alpha_df(experiment, ids)
library(dplyr)
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id==ids & !is.na(df$id)]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
alphas <- alpha_df(experiment, ids)
library(dplyr)
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id==ids & !is.na(df$id), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
alphas <- alpha_df(experiment, ids)
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id %in% ids & !is.na(df$id), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
alpha_df(experiment, ids)
outcomes <- tibble(id = ids, alpha = alphas)
outcomes
alphas
experiment[experiment$id %in% ids & !is.na(experiment$id), ]
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id %in% ids & !is.na(df$id), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
alpha_df(experiment, ids)
# 3. create vector ids
ids <- unique(experiment$id)
# 4. create vector alphas
alphas <- alpha_df(experiment, ids)
# 5. create tibble outcomes
outcomes <- tibble(id = ids, alpha = alphas)
outcomes
# Homework: function, control structures, and iteration
# =====================================================
# Goal: create functions and use iteration
# clear workspace
rm(list = ls())
# load necessary libraries
library(tibble)
library(purrr)
# load the data needed
load("hw04.RData")
# 1. create function alpha(pstar, p)
alpha <- function(pstar, p) {
if (!(is.numeric(pstar) && pstar > 0
&& length(pstar) == 1 && is.numeric(p)
&& any(p > 0)))
stop("Bad inputs")
upper <- round(sum((p - pstar) ^ 2) / length(p), 5)
alpha <- round(sqrt(upper) / pstar * 100, 5)
return(alpha)
}
save(alpha, file = "results.RData")
# 2. create function alpha_df(df, id)
library(dplyr)
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id %in% ids & !is.na(df$id), ]
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
save(alpha, alpha_df, file = "results.RData")
# 3. create vector ids
ids <- unique(experiment$id)
save(alpha, alpha_df, ids, file = "results.RData")
# 4. create vector alphas
alphas <- alpha_df(experiment, ids)
save(alpha, alpha_df, ids, alphas, file = "results.RData")
# 5. create tibble outcomes
outcomes <- tibble(id = ids, alpha = alphas)
outcomes
save(alpha, alpha_df, ids, alphas, outcomes, file = "results.RData")
# Homework: function, control structures, and iteration
# =====================================================
# Goal: create functions and use iteration
# clear workspace
rm(list = ls())
# load necessary libraries
library(tibble)
library(purrr)
# load the data needed
load("hw04.RData")
# 1. create function alpha(pstar, p)
alpha <- function(pstar, p) {
if (!(is.numeric(pstar) && pstar > 0
&& length(pstar) == 1 && is.numeric(p)
&& any(p > 0)))
stop("Bad inputs")
upper <- round(sum((p - pstar) ^ 2) / length(p), 5)
alpha <- round(sqrt(upper) / pstar * 100, 5)
return(alpha)
}
save(alpha, file = "results.RData")
# 2. create function alpha_df(df, id)
library(dplyr)
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id %in% ids & !is.na(df$id), ]
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
save(alpha, alpha_df, file = "results.RData")
# 3. create vector ids
ids <- unique(experiment$id)
save(alpha, alpha_df, ids, file = "results.RData")
# 4. create vector alphas
alphas <- alpha_df(experiment, ids)
save(alpha, alpha_df, ids, alphas, file = "results.RData")
# 5. create tibble outcomes
outcomes <- tibble(id = ids, alpha = alphas)
outcomes
save(alpha, alpha_df, ids, alphas, outcomes, file = "results.RData")
print(outcomes)
print.data.frame(outcomes)
load("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/04_c/du/hw04.RData")
load("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/04_c/du/hw04.RData")
load("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/04_c/du/hw04.RData")
load("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/04_c/du/hw04.RData")
setwd("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/05_c")
data(txhousing, package="ggplot2")
txhousing
class(txhousing)
load("http://ec.europa.eu/eurostat/tgm/table.do?tab=table&init=1&language=en&pcode=tec00001&plugin=1")
install.packages("eurostat")
# 2
load("tec00001.RData")
head(tec00001)
# library(eurostat)
library(readr)
# 3
read.csv2("tec00001.csv")
# 3
read_csv2("tec00001.csv")
# 3
read_delim("tec00001.csv")
# 3
tec00001tsv <- read_tsv("tec00001.tsv.gz")
head(tec00001tsv)
# 3
tec00001tsv <- read_tsv("tec00001.tsv.gz", col_types = "cnnnnnnnnnnn")
head(tec00001tsv)
# 4
library(readxl)
tec00001xls <- read_excel("tec00001.xls")
head(tec00001xls)
filenam <- "Eurostat_Table_tec00001FlagDesc_11c465e3-eae1-4c8e-b956-f473d4a78a0a.xls"
tec00001xls <- read_excel(filenam)
head(tec00001xls)
tec00001xls <- read_excel(filenam, skip = 1:2)
tec00001xls <- read_excel(filenam, skip = 2)
head(tec00001xls)
tec00001xls <- read_excel(filenam, skip = 3)
head(tec00001xls)
? read_excel
source("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/05_c/05_c.R", echo=TRUE)
head(tec00001xls$`geo\time`)
head(tec00001xls["geo_time"])
head(tec00001xls["geo\\time"])
##########################       Murphy: Co se může pokazit      #######################
# 1
read_lines("experiment.csv")
# 2
read_csv("experiment.csv")
# 2
read_csv2("experiment.csv")
# 2
read_delim("experiment.csv", delim = ":")
problems()
experiment <- read_delim("experiment.csv", delim = ":", escape_double = FALSE,
col_types = cols(treatment = col_factor(
levels = c("control", "group A", "group B")
)),
locale = locale(decimal_mark = ","),
trim_ws = TRUE,
skip = 8
)
head(experiment)
# 3
experiment2 <- read_delim("experiment2.csv")
experiment2
experiment2 <- read_delim(
"experiment2.csv",
col_names = col_types(
"id" = "d",
"name" = "c",
"height" = "d",
"weight" = "d",
"treatment" = col_factor(levels = c("control", "group A", "group B"))
"value" = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
experiment2
# 3
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE
col_names = col_types(
"id" = "d",
"name" = "c",
"height" = "d",
"weight" = "d",
"treatment" = col_factor(levels = c("control", "group A", "group B"))
"value" = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
experiment2
# 3
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE,
col_names = col_types(
"id" = "d",
"name" = "c",
"height" = "d",
"weight" = "d",
"treatment" = col_factor(levels = c("control", "group A", "group B"))
"value" = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
# 3
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE,
col_types = cols(
"id" = "d",
"name" = "c",
"height" = "d",
"weight" = "d",
"treatment" = col_factor(levels = c("control", "group A", "group B"))
"value" = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
# 3
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE,
col_types = cols(
"id" = "d",
"name" = "c",
"height" = "d",
"weight" = "d",
"treatment" = col_factor(levels = c("control", "group A", "group B"))
"value" = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE,
col_types = cols(
"id" = "d",
"name" = "c",
"height" = "d",
"weight" = "d",
"treatment" = col_factor(levels = c("control", "group A", "group B"))
"value" = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
# 3
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE,
col_types = cols(
id = "d",
name = "c",
height = "d",
weight = "d",
treatment = col_factor(levels = c("control", "group A", "group B"))
value = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE,
col_types = cols(
id = "d",
name = "c",
height = "d",
weight = "d",
treatment = col_factor(levels = c("control", "group A", "group B"))
value = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
head(experiment2)
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE,
col_names = FALSE
col_types = cols(
id = "d",
name = "c",
height = "d",
weight = "d",
treatment = col_factor(levels = c("control", "group A", "group B"))
value = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE,
col_names = FALSE,
col_types = cols(
id = "d",
name = "c",
height = "d",
weight = "d",
treatment = col_factor(levels = c("control", "group A", "group B")),
value = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
head(experiment2)
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE,
#col_names = FALSE,
col_types = cols(
id = "d",
name = "c",
height = "d",
weight = "d",
treatment = col_factor(levels = c("control", "group A", "group B")),
value = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
head(experiment2)
experiment2 <- read_delim(
"experiment2.csv",
delim = ":",
escape_double = FALSE,
col_names = c("id", "name", "height", "weight", "treatment", "value"),
col_types = cols(
id = "d",
name = "c",
height = "d",
weight = "d",
treatment = col_factor(levels = c("control", "group A", "group B")),
value = "d"
),
locale = locale(decimal_mark = ","),
trim_ws = TRUE
)
head(experiment2)
experiment3 <- read_delim("experiment3.csv")
head(experiment3)
# 4
experiment3 <- read_delim("experiment3.csv")
# 4
spec("experiment3.csv")
# 4
guess_encoding("experiment3.csv")
experiment3 <- read_delim("experiment3.csv", locale = locale(encoding = "ISO-8859-2"))
experiment3 <- read_delim("experiment3.csv", locale = locale(encoding = "ISO-8859-2", delim=":"))
experiment3 <- read_delim("experiment3.csv", locale = locale(encoding = "ISO-8859-2", decimal_mark = =":"))
experiment3 <- read_delim("experiment3.csv", delim = ":"
locale = locale(encoding = "ISO-8859-2", decimal_mark = =":"))
experiment3 <- read_delim("experiment3.csv", delim = ":",
locale = locale(encoding = "ISO-8859-2", decimal_mark = =":"))
experiment3 <- read_delim("experiment3.csv", delim = ":",
locale = locale(encoding = "ISO-8859-2", decimal_mark =":"))
experiment3 <- read_delim("experiment3.csv", delim = ":", skip = 8
locale = locale(encoding = "ISO-8859-2", decimal_mark = ":"))
experiment3 <- read_delim("experiment3.csv", delim = ":", skip = 8,
locale = locale(encoding = "ISO-8859-2", decimal_mark = ":"))
experiment3 <- read_delim("experiment3.csv", delim = ":", skip = 8,
locale = locale(encoding = "ISO-8859-2", decimal_mark = ","))
head(experiment3)
guess_encoding("experiment3.csv")
experiment3 <- read_delim(
"experiment3.csv",
delim = ":",
skip = 8,
locale = locale(encoding = "ISO-8859-2", decimal_mark = ","),
col_types = (treatment = col_factor(levels = c("control", "group A", "group B")))
)
experiment3 <- read_delim(
"experiment3.csv",
delim = ":",
skip = 8,
locale = locale(encoding = "ISO-8859-2", decimal_mark = ","),
col_types = cols(treatment = col_factor(levels = c("control", "group A", "group B")))
)
head(experiment3)
# 5
summary(expriment)
# 5
summary(experiment)
save(txhousing, tec00001, experiment, file = "results.RData")
rm(list = ls())
load("results.Rdata")
library(rio)
export(txhousing, "txhousing.csv")
export(tec00001, "tec00001.csv")
export(experiment, "experiment.csv")
export(txhousing, "txhousing.csv", format = "csv", setclass="tibble")))
export(txhousing, "txhousing.csv", format = "csv", setclass="tibble")
? export
export(txhousing, "txhousing.csv", format = "csv")
export(tec00001, "tec00001.csv", format = "csv")
export(experiment, "experiment.csv", format = "csv")
