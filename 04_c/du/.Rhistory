, 1:x) # purr
#  alebo - robi to iste co to predtym (. je povolene meno premennej)
s <- map(1:5, ~ 1:.)
v <- map_dbl(s, mean) # map_dbl s balika purr
print(v)
# Ukol 4
Sign <- function(x) {
if (x > 0)
1
else if (x == 0)
0
else
- 1
}
print(Sign(-10))
print(Sign(1))
print(Sign(0))
# Ukol 5
rand_vekt <- map(1:5, ~ runif(10)))
print(rand_vekt)
####################################################################
####################################################################
#                       Hratky s funkcemi
# Ukol 1
vekt <- function(n) {
if (is.numeric(n) && length(n) == 1 && round(n) == n && n > 0)
1:n
else
NA
}
print(vekt(5))
print(vekt(0))
# Ukol 2
nmax <- function(x, n = 1) {
stopifnot(is.numeric(x),
is.numeric(n),
length(n) == 1,
round(n) == n,
n > 0)
sort(unique(x), decreasing = TRUE)[n]
}
print(nmax(1:5, 2))
print(nmax(1:10))
print(nmax(1:10, c(1, 2)))
##################################################################
##################################################################
#                           Iterace
# Ukol 1
library(purrr)
library(ggplot2)
data("mpg", package = "ggplot2")
print(map_chr(mpg, class))
print(map_int(mpg, ~ sum(is.na(.))))
##################################################################
#                       Nemecka picovina
# Ukol 1
testy <- function(o = 50,
so = 30,
pok = 3) {
spravil <- FALSE
n <- 0
while (spravil != 1 && n != pok) {
odpovede <- sample(
x = c(0, 1),
size = o,
prob = c(3 / 4, 1 / 4),
replace = TRUE
)
spravne <- sum(odpovede)
if (spravne < so) {
spravil <- FALSE
n <- n + 1
}
else if (spravne >= so)
spravil <- TRUE
}
return(spravil)
}
# call
S <- 10000
vysledok <- 0
for (s in 1:10000) {
vysledok <- vysledok + testy()
}
freq <- vysledok / S
print(freq)
## Mam to spravne, ale da sa to spravit omnhoo efektivnejsie - UCITELOVO RIESENIE
jeden_test <- function(otazek)
sum(sample(
0:1,
size = otazek,
replace = TRUE,
prob = c(3 / 4, 1 / 4)
))
# pomocí starého replicate()
testy <- function(otazek, opakovani)
max(replicate(opakovani, jeden_test(otazek)))
# totéž pomocí purrr
testy <- function(otazek, opakovani)
max(map_int(seq_len(opakovani), ~ jeden_test(otazek)))
# mean(replicate(1e4, testy(50, 3)) >= 30)  # pomocí starého replicate
freq <- mean(map(1:1e4, ~ testy(50, 3)) >= 30)  # totéž pomocí purrr
print(freq)
# Ukol 2
jeden_test <- function(otazek, pozna)
sum(sample(
0:1,
size = otazek,
replace = TRUE,
prob = c(3 / 4, 1 / 4)
)) +
as.integer(pozna)
# ! Pozor musel som zmenit map_int na map_dbl lebo to robilo problemy !
testy <- function(otazek, opakovani, pozna)
max(map_dbl(seq_len(opakovani), ~ jeden_test(otazek, pozna)))
# Simuluj
pozna_o <- function(otazek, opakovani, pozna, n = 1e4)
mean(map(n, ~ testy(otazek, opakovani, pozna)) >= 30L)
#mean(replicate(n, testy(otazek, opakovani, pozna)) >= 30)
pozna_seq <- 0:50
pozna_p <- map_dbl(pozna_seq, ~ pozna_o(50, 3, .))
plot(pozna_seq, pozna_p, type = "l")
# Ukol 3
print(min(pozna_seq[pozna_p >= 0.05]))
print(min(pozna_seq[pozna_p >= 0.5]))
########################################################################################
#                                   Total Brutal
info_vector <- function(vec, what) {
map(what, vec)
}
? map
map(mean, c(c(1,2,3), c(4, 5,6)))
map(c(c(1,2,3), c(4, 5,6)), ~mean)
map(c(c(1,2,3), c(4, 5,6)), ~mean(.))
map(c(c(1,2,3), c(4, 5,6)), ~c(mean(.), median(.))
pri
map(c(c(1,2,3), c(4, 5,6)), ~c(mean(.), median(.)))
list(mean, median)
f <- list(mean, meadian)
f <- list(mean, median)
map(list, ~.(c(1, 2, 3)))
print(f(vec))
vec <- c(1, 2, 3)
for (f in what){
print(f(vec))
}
what <- list(mean, median)
vec <- c(1, 2, 3)
for (f in what){
print(f(vec))
}
info_vector <- function(vec, what) {
vecout <- c()
for (f in what) {
append(vecout, f(vec))
}
return(vecout)
}
info_vector(c(1, 2, 3), list(mean, median))
what <- list(mean, median)
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
append(vecout, f(vec))
}
vecout
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
}
what <- list(mean, median)
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
vecout <- c(vecout, vec)
}
vecout
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
vecout <- c(vecout, f(vec))
}
vecout
info_vector <- function(vec, what) {
vecout <- c()
for (f in what) {
vecout <- c(vecout, f(vec))
}
return(vecout)
}
info_vector(c(1, 2, 3), list(mean, median))
map(names(mpg), info_vector(mpg$., what))
map(names(mpg), ~info_vector(mpg$., what))
map(names(mpg), ~info_vector(mpg$x, what))
med_col <- c()
for (col in names(mpg)) {
c(med_col, info_vector(mpg$col, list(median))
}
med_col <- c()
for (col in names(mpg)) {
c(med_col, info_vector(mpg$col, list(median)))
}
med_col
class(mpg$manufacturer)
mpg$manufacturer
class(as.vecto(mpg$manufacturer))
class(as.vector(mpg$manufacturer))
class(c(1, 2, 3))
is.vector(as.vector(mpg$manufacturer))
med_col <- c()
for (col in names(mpg)) {
print(c(med_col, info_vector(mpg$col, list(median))))
}
med_col <- c()
for (col in names(mpg)) {
print(c(med_col, info_vector(mpg$col, list(mean, median))))
}
med_col <- c()
for (col in names(mpg)) {
if (class(mpg$col) == "character")
print(c(med_col, NA))
else
print(c(med_col, info_vector(mpg$col, list(mean, median))))
}
? rep
? dplyr::bind_rows
info <- function(df, ...) {
info_vector <- function(vec, what) {
if (!is.numeric(vec))
return(rep(NA_real_, length(what)))
else
map_dbl(what, ~.(vec))
}
print(map(df, info_vector, what))
what <- list(...)
res <- dplyr::bind_rows(map(df, info_vector, what))
tibble::as_tibble(cbind(stat = names(what), res))
}
print(map(df, info_vector, what))
info_vector <- function(vec, what) {
if (!is.numeric(vec))
return(rep(NA_real_, length(what)))
else
map_dbl(what, ~.(vec))
}
info(mpg, what=list(mean, median, modus))
info(mpg, what=list(mean, median))
View(what)
View(what)
View(mpg)
View(mpg)
setwd("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/04_c/du")
# Homework: function, control structures, and iteration
# =====================================================
# Goal: create functions and use iteration
# clear workspace
rm(list = ls())
# load necessary libraries
library(tibble)
library(purrr)
# load the data needed
load("hw04.RData")
# 1. create function alpha(pstar, p)
alpha <- function(pstar, p) {
if (!(is.numeric(pstar) && pstar > 0
&& length(pstar) == 1 && is.numeric(p)
&& any(p > 0)))
stop("Bad inputs")
upper <- sum((p - pstar) ^ 2) / length(p)
alpha <- sqrt(upper) / pstar * 100
return(alpha)
}
save(alpha, file = "results.RData")
# 2. create function alpha_df(df, id)
library(dplyr)
alpha_df <- function(df, ids, pstars) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(pstars)
map(pstars, ~alpha(., df[df$pstar==., "p"]))
}
alpha_df(experiment, experiment$id, experiment$pstar)
save(alpha, alpha_df, file = "results.RData")
# 3. create vector ids
ids <- unique(experiment$id)
save(alpha, alpha_df, ids, file = "results.RData")
# 4. create vector alphas
alphas <- map(ids,
unique(experiment$pstar),
~ alpha_df(experiment[experiment$id == x, "pstar"][1],
experiment[experiment$id == y, "p"]))
save(alpha, alpha_df, ids, alphas, file = "results.RData")
# 5. create tibble outcomes
save(alpha, alpha_df, ids, alphas, outcomes, file = "results.RData")
library(dplyr)
alpha_df <- function(df, ids, pstars) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(pstars)
map(pstars, alpha(., df[df$pstar==., "p"]))
}
alpha_df(experiment, experiment$id, experiment$pstar)
map(pstars, alpha(x, df[df$pstar==x, "p"]))
library(dplyr)
alpha_df <- function(df, ids, pstars) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(pstars)
map(pstars, ~alpha(., df[df$pstar==., "p"]))
}
alpha_df(experiment, experiment$id, experiment$pstar)
unique(experiment$pstar)
alpha(experiment$pstar[[1]], experiment[experiment$pstar==experiment$pstar[[1]], "p"])
experiment$pstar[[1]]
experiment[experiment$pstar == experiment$pstar[[1]]
alpha(experiment$pstar[[1]], experiment[experiment$pstar == experiment$pstar[[1]]])
alpha(experiment$pstar[[1]], experiment[experiment$pstar == experiment$pstar[[1]]])
alpha(experiment$pstar[[1]], experiment[experiment$pstar == experiment$pstar[[1]], "p"])
experiment[experiment$pstar == experiment$pstar[[1]], "p"]
alpha(experiment$pstar[[1]], experiment[experiment$pstar == experiment$pstar[[1]], "p"][1])
experiment[experiment$pstar == experiment$pstar[[1]], "p"][1]
as.array(experiment[experiment$pstar == experiment$pstar[[1]], "p"][1])
pull(experiment, "p")
alpha(experiment$pstar[[1]], pull(experiment[experiment$pstar == experiment$pstar[[1]], "p"], "p"))
# 2. create function alpha_df(df, id)
library(dplyr)
alpha_df <- function(df, ids, pstars) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(pstars)
map(pstars, ~alpha(., pull(df[df$pstar==., "p"], "p")))
}
alpha_df(experiment, experiment$id, experiment$pstar)
library(dplyr)
alpha_df <- function(df, ids) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(df$pstars)
map(pstars, ~alpha(., pull(df[df$pstar==., "p"], "p")))
}
alpha_df(experiment, experiment$id, experiment$pstar)
# 2. create function alpha_df(df, id)
library(dplyr)
alpha_df <- function(df, ids) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map(pstars, ~alpha(., pull(df[df$pstar==., "p"], "p")))
}
alpha_df(experiment, experiment$id)
alphas <- alpha_df(experiment, experiment$id)
alphas
alpha_df <- function(df, ids) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., pull(df[df$pstar==., "p"], "p")))
}
alphas <- alpha_df(experiment, experiment$id)
alphas
? pull
pull(experiment$p)
pull(experiment$p, "p")
class(experiement$p)
class(experiment$p)
is.vector(experiement$p)
is.vector(experiment$p)
library(dplyr)
alpha_df <- function(df, ids) {
df <- df[!is.na(ids), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
# 4. create vector alphas
alphas <- alpha_df(experiment, experiment$id)
alphas
alphas <- alpha_df(experiment, ids)
library(dplyr)
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id==ids & !is.na(df$id)]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
alphas <- alpha_df(experiment, ids)
library(dplyr)
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id==ids & !is.na(df$id), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
alphas <- alpha_df(experiment, ids)
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id %in% ids & !is.na(df$id), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
alpha_df(experiment, ids)
outcomes <- tibble(id = ids, alpha = alphas)
outcomes
alphas
experiment[experiment$id %in% ids & !is.na(experiment$id), ]
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id %in% ids & !is.na(df$id), ]
ids <- unique(ids)
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
alpha_df(experiment, ids)
# 3. create vector ids
ids <- unique(experiment$id)
# 4. create vector alphas
alphas <- alpha_df(experiment, ids)
# 5. create tibble outcomes
outcomes <- tibble(id = ids, alpha = alphas)
outcomes
# Homework: function, control structures, and iteration
# =====================================================
# Goal: create functions and use iteration
# clear workspace
rm(list = ls())
# load necessary libraries
library(tibble)
library(purrr)
# load the data needed
load("hw04.RData")
# 1. create function alpha(pstar, p)
alpha <- function(pstar, p) {
if (!(is.numeric(pstar) && pstar > 0
&& length(pstar) == 1 && is.numeric(p)
&& any(p > 0)))
stop("Bad inputs")
upper <- round(sum((p - pstar) ^ 2) / length(p), 5)
alpha <- round(sqrt(upper) / pstar * 100, 5)
return(alpha)
}
save(alpha, file = "results.RData")
# 2. create function alpha_df(df, id)
library(dplyr)
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id %in% ids & !is.na(df$id), ]
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
save(alpha, alpha_df, file = "results.RData")
# 3. create vector ids
ids <- unique(experiment$id)
save(alpha, alpha_df, ids, file = "results.RData")
# 4. create vector alphas
alphas <- alpha_df(experiment, ids)
save(alpha, alpha_df, ids, alphas, file = "results.RData")
# 5. create tibble outcomes
outcomes <- tibble(id = ids, alpha = alphas)
outcomes
save(alpha, alpha_df, ids, alphas, outcomes, file = "results.RData")
# Homework: function, control structures, and iteration
# =====================================================
# Goal: create functions and use iteration
# clear workspace
rm(list = ls())
# load necessary libraries
library(tibble)
library(purrr)
# load the data needed
load("hw04.RData")
# 1. create function alpha(pstar, p)
alpha <- function(pstar, p) {
if (!(is.numeric(pstar) && pstar > 0
&& length(pstar) == 1 && is.numeric(p)
&& any(p > 0)))
stop("Bad inputs")
upper <- round(sum((p - pstar) ^ 2) / length(p), 5)
alpha <- round(sqrt(upper) / pstar * 100, 5)
return(alpha)
}
save(alpha, file = "results.RData")
# 2. create function alpha_df(df, id)
library(dplyr)
alpha_df <- function(df, ids) {
#df <- df[!is.na(ids), ]
df <- df[df$id %in% ids & !is.na(df$id), ]
pstars <- unique(df$pstar)
map_dbl(pstars, ~alpha(., df[df$pstar==., ]$p))
}
save(alpha, alpha_df, file = "results.RData")
# 3. create vector ids
ids <- unique(experiment$id)
save(alpha, alpha_df, ids, file = "results.RData")
# 4. create vector alphas
alphas <- alpha_df(experiment, ids)
save(alpha, alpha_df, ids, alphas, file = "results.RData")
# 5. create tibble outcomes
outcomes <- tibble(id = ids, alpha = alphas)
outcomes
save(alpha, alpha_df, ids, alphas, outcomes, file = "results.RData")
print(outcomes)
print.data.frame(outcomes)
load("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/04_c/du/hw04.RData")
load("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/04_c/du/hw04.RData")
load("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/04_c/du/hw04.RData")
load("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/04_c/du/hw04.RData")
