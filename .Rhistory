MCMC <-
bayesGARCH(r,
control = list(
start.val = c(0, 1, 3, 4)
n.chain = 1,
r <- as.vector(amzn$r)
MCMC <-
bayesGARCH(r,
control = list(
start.val = c(0, 1, 3, 4),
n.chain = 1,
l.chain = 10000,
refresh = 1000,
digits = 5,
addPriorConditions = prior.conditions
))
r <- as.vector(amzn$r)
MCMC <-
bayesGARCH(r,
control = list(
start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 1,
l.chain = 10000,
refresh = 1000,
digits = 5,
addPriorConditions = prior.conditions
))
prior.conditions <- function(psi){
psi[1] > 0,
prior.conditions <- function(psi){
psi[1] > 0 & psi[2] >= 0 & psi[3] >= 0 & psi[2] + psi[3] < 1
}
r <- as.vector(amzn$r)
MCMC <-
bayesGARCH(r,
control = list(
start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 1,
l.chain = 10000,
refresh = 1000,
digits = 5,
addPriorConditions = prior.conditions
))
r <- as.vector(amzn$r)
MCMC <-
bayesGARCH(r,
control = list(
# start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 1,
l.chain = 10000,
refresh = 1000,
digits = 5,
addPriorConditions = prior.conditions
))
plot(MCMC)
burnin(MCMC)
burnin(MCMC$chain1)
MCMC.conv <- MCMC$chain1[n.burn:]
MCMC.conv <- MCMC$chain1[n.burn:length(MCMC$chain1)]
n.bunr <- burnin(MCMC$chain1)
n.bunr
MCMC.conv <- MCMC$chain1[n.burn:length(MCMC$chain1)]
class(burnin(MCMC$chain1))
n.bunr <- burnin(MCMC$chain1)
n.bunr
n.burn <- burnin(MCMC$chain1)
n.burn
MCMC.conv <- MCMC$chain1[n.burn:length(MCMC$chain1)]
print(Geweke.Diagnostic(MCMC.conv))
print(is.stationary(MCMC.conv))
head(MCMC$chain1)
MCMC.conv <- MCMC$chain1[n.burn:length(MCMC$chain1), ]
MCMC.conv
unclass(MCMC$chain1)
MCMC.conv <- unclass(MCMC$chain1)[n.burn:length(MCMC$chain1), ]
MCMC.conv <- unclass(MCMC$chain1) <- [n.burn:length(MCMC$chain1), ]
MCMC.conv <- as_tibble(unclass(MCMC$chain1))
MCMC.conv <- MCMC.conv[n.burn:dim(MCMC.conv)[1], ]
MCMC.conv
print(Geweke.Diagnostic(MCMC.conv))
print(is.stationary(MCMC.conv))
print(Geweke.Diagnostic(MCMC))
print(is.stationary(MCMC))
print(Geweke.Diagnostic(MCMC.conv$alpha0))
print(is.stationary(MCMC))
print(Geweke.Diagnostic(MCMC.conv$alpha0))
print(is.stationary(MCMC))
plot(MCMC.conv)
r <- as.vector(amzn$r)
MCMC <-
bayesGARCH(r,
control = list(
# start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 1,
l.chain = 50000,
refresh = 5000,
digits = 5,
addPriorConditions = prior.conditions
))
plot(MCMC)
n.burn <- burnin(MCMC$chain1)
n.burn
MCMC.conv <- as_tibble(unclass(MCMC$chain1))
MCMC.conv <- MCMC.conv[n.burn:dim(MCMC.conv)[1], ]
MCMC.conv <- as_tibble(unclass(MCMC$chain1))
MCMC.conv <- MCMC.conv[n.burn:dim(MCMC.conv)[1], ]
print(Geweke.Diagnostic(MCMC.conv$alpha0))
print(is.stationary(MCMC))
print(Geweke.Diagnostic(MCMC.conv$alpha0))
print(is.stationary(MCMC.conv$alpha0))
is.model(bayesGARCH())
is.model(MCMC)
is.model( bayesGARCH(r,
control = list(
# start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 1,
l.chain = 50000,
refresh = 5000,
digits = 5,
addPriorConditions = prior.conditions
)))
is.model(bayesGARCH(r,
control = list(
# start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 1,
l.chain = 500,
refresh = 50,
digits = 5,
addPriorConditions = prior.conditions
)))
is.model(bayesGARCH(r,
control = list(
# start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 1,
l.chain = 500,
refresh = 50,
digits = 5,
addPriorConditions = prior.conditions
)), Initial.Values = c(0, 0, 0, 0))
is.model(bayesGARCH(r,
control = list(
# start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 1,
l.chain = 500,
refresh = 50,
digits = 5,
addPriorConditions = prior.conditions
)), Initial.Values = c(0, 0, 0, 0), data=r)
is.model(bayesGARCH(r,
control = list(
# start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 1,
l.chain = 500,
refresh = 50,
digits = 5,
addPriorConditions = prior.conditions
)), Initial.Values = c(0, 0, 0, 0))
is.model(bayesGARCH(r,
control = list(
# start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 1,
l.chain = 500,
refresh = 50,
digits = 5,
addPriorConditions = prior.conditions
)), Initial.Values = c(0, 0, 0, 0), Data=r)
print(Geweke.Diagnostic(MCMC.conv$alpha0))
Gelman.Diagnostic(MCMC)
r <- as.vector(amzn$r)
MCMC <-
bayesGARCH(r,
control = list(
# start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 2,
l.chain = 50000,
refresh = 5000,
digits = 5,
addPriorConditions = prior.conditions
))
r <- as.vector(amzn$r)
MCMC <-
bayesGARCH(r,
control = list(
# start.val = c(0.01, 0.9, 0.3, 0.4),
n.chain = 2,
l.chain = 10000,
refresh = 2000,
digits = 5,
addPriorConditions = prior.conditions
))
plot(MCMC)
Gelman.Diagnostic(MCMC)
coda::gelman.diag(MCMC)
? coda::gelman.diag
print(coda::gelman.diag(MCMC))
1 - coda::rejectionRate(MCMC)
coda::autocorr.diag(MCMC)
smpl <- formSmpl(MCMC, l.bi = 2500,
batch.size = 2)
print(coda::gelman.diag(MCMC))
n.burn <- burnin(MCMC)
? burning
? burnin
n.burn <- burnin(MCMC$chain1, "Geweke")
print(coda::gelman.diag(MCMC))
n.burn <- burnin(MCMC$chain1, "Geweke")
print(coda::gelman.diag(MCMC))
n.burn <- burnin(MCMC$chain1, "BMK")
print(coda::gelman.diag(MCMC))
n.burn <- burnin(MCMC$chain1, "BMK")
print(n.burn)
print(coda::gelman.diag(MCMC, autoburnin = 8000))
n.burn <- burnin(MCMC$chain1, "BMK")
print(n.burn)
```{r}
summary(smpl)
smpl <- formSmpl(MCMC, l.bi = 5000,
batch.size = 2)
summary(smpl)
coda::autocorr.diag(smpl)
head(smpl)
smpl[, 1]
ggplot(persistance)
ggplot(persistence)
persistence <- smpl[, 2] + smpl[, 3]
ggplot(persistence)
persistence <- unclass(smpl[, 2] + smpl[, 3])
ggplot(persistence)
hist(persistence)
median(persistence)
persistence <- unclass(smpl[, 2] + smpl[, 3])
hist(persistence)
median(persistence)
# Clear workspace
rm(list=ls())
#install.packages("bayesGARCH")
#install.packages("tidyquant")
#install.packages("LaplacesDemon")
# Load packages
library(tidyverse)
library(ggthemes)
library(bayesGARCH)
library(tidyquant)
library(LaplacesDemon)
library(coda)
getSymbols("AMZN", from='2010-01-01', to='2021-12-11')
dates <- rownames(as.data.frame(AMZN))
amzn <- as_tibble(AMZN$AMZN.Adjusted)
head(amzn)
colnames(amzn) <- "a_close"
amzn$date <- dates
amzn <- amzn %>%
mutate(r = c(NA, (a_close[-1] - a_close[-length(a_close)]) / a_close[-length(a_close)])) %>%
na.omit()
head(amzn)
plot(amzn$r, type="l", ylab = "Daily returns")+
grid()
amzn %>%
ggplot(aes(x=r)) +
geom_histogram(aes(y=..density..)) +
geom_density() +
scale_x_continuous(breaks = seq(-0.2, 0.2, 0.05)) +
theme_economist_white()
qqnorm(amzn$r, pch=1, frame=TRUE)
qqline(amzn$r, col="blue", lwd=3)
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(
x = as.Date(date),
y = value,
group = name
)) +
geom_line() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(x= "Date", y="") +
facet_grid("name", scales = "free", labeller = as_labeller(c("a_close"="Adj. Close",
"r"="Daily Return"))) +
theme_bw() +
theme(strip.text.y = element_text(angle=0))
? LaplacesDemon
T <- length(r)
r <- as.vector(amzn$r)
T <- length(r)
mon.names <- c("LP", "r_new", "sigma2.new")
parm.names <- c("alpha",
"phi",
"logit.theta[1]",
"logit.theta[2]",
"logit.theta[3]")
PGF <- function(Data) return(c(rnormv(2, 0, 1000)),
log(rhalfcauchy(1, 25)), runif(2))
MyData <- list(PGF=PGF, T=T, mon.names=mon.names, parm.names=parm.names, y=r)
model <- function(parm, Data) {
# Parameters
alpha <- parm[1]; phi <- parm[2]
theta <- invlogit(interval(parm[grep("logit.theta", Data$parm.names)], -10, 10))
parm[grep("logit.theta", Data$parm.names)] <- logit(theta)
# Log(Prior Densities)
alpha.prior <- dnormv(alpha, 0, 1000, log=TRUE)
phi.prior <- dnormv(phi, 0, 1000, log=TRUE)
theta.prior <- sum(dnormv(theta, 0, 1000, log=TRUE))
# Log-Likelihood
mu <- c(alpha, alpha + phi*Data$y[-Data$T])
epsilon <- Data$y - mu
sigma2 <- c(theta[1], theta[1] + theta[2]*epsilon[-Data$T]^2)
sigma2[-1] <- sigma2[-1] + theta[3]*sigma2[-Data$T]
sigma2.new <- theta[1] + theta[2]*epsilon[Data$T]^2 +
theta[3]*sigma2[Data$T]
ynew <- rnormv(1, alpha + phi*Data$y[Data$T], sigma2.new)
LL <- sum(dnormv(Data$y, mu, sigma2, log=TRUE))
### Log-Posterior
LP <- LL + alpha.prior + phi.prior + theta.prior
Modelout <- list(LP=LP, Dev=-2*LL, Monitor=c(LP, ynew, sigma2.new),
yhat=rnormv(length(mu), mu, sigma2), parm=parm)
return(Modelout)
}
initial.values <- c(rep(0, 2), rep(0.4 ,3))
LaplacesDemon(Model=model, Data = MyData, Initial.Values = initial.values)
r <- as.vector(amzn$r)
prior.conditions <- function(psi) {
# (psi[1] > 0) & (psi[2] >= 0) & (psi[3] >= 0) &
(psi[2] + psi[3] < 1)
}
s_0 <- 25000 # Burn-in
s_1 <- 25000
s <- s_0 + s_1
MCMC <-
bayesGARCH(r,
control = list(
n.chain = 2,
l.chain = s,
refresh = 2500,
digits = 5,
# addPriorConditions = prior.conditions
))
MCMC <-
bayesGARCH(r,
control = list(
n.chain = 2,
l.chain = s,
refresh = 2500,
digits = 5
# addPriorConditions = prior.conditions
))
plot(MCMC)
r <- as.vector(amzn$r)
prior.conditions <- function(psi) {
# (psi[1] > 0) & (psi[2] >= 0) & (psi[3] >= 0) &
(psi[2] + psi[3] < 1)
}
s_0 <- 12500 # Burn-in
s_1 <- 12500
s <- s_0 + s_1
MCMC <-
bayesGARCH(r,
control = list(
n.chain = 2,
l.chain = s,
refresh = 2500,
digits = 5, # addPriorConditions = prior.conditions
))
MCMC <-
bayesGARCH(r,
control = list(
n.chain = 2,
l.chain = s,
refresh = 2500,
digits = 5 #, addPriorConditions = prior.conditions
))
r <- as.vector(amzn$r)
prior.conditions <- function(psi) {
(psi[1] > 0) & (psi[2] >= 0) & (psi[3] >= 0) &
(psi[2] + psi[3] < 1)
}
s_0 <- 12500 # Burn-in
s_1 <- 12500
s <- s_0 + s_1
MCMC <-
bayesGARCH(r,
control = list(
n.chain = 2,
l.chain = s,
refresh = 2500,
digits = 5 #, addPriorConditions = prior.conditions
))
MCMC <-
bayesGARCH(r,
control = list(
n.chain = 2,
l.chain = s,
refresh = 2500,
digits = 5 #, addPriorConditions = prior.conditions
))
# Clear workspace
rm(list=ls())
#install.packages("bayesGARCH")
#install.packages("tidyquant")
#install.packages("LaplacesDemon")
# Load packages
library(tidyverse)
library(ggthemes)
library(bayesGARCH)
library(tidyquant)
library(LaplacesDemon)
library(coda)
MCMC <-
bayesGARCH(r,
control = list(
n.chain = 2,
l.chain = s,
refresh = 2500,
digits = 5 #, addPriorConditions = prior.conditions
))
# Clear workspace
rm(list=ls())
#install.packages("bayesGARCH")
#install.packages("tidyquant")
#install.packages("LaplacesDemon")
# Load packages
library(tidyverse)
library(ggthemes)
library(bayesGARCH)
library(tidyquant)
library(LaplacesDemon)
library(coda)
getSymbols("AMZN", from='2010-01-01', to='2021-12-11')
dates <- rownames(as.data.frame(AMZN))
amzn <- as_tibble(AMZN$AMZN.Adjusted)
head(amzn)
colnames(amzn) <- "a_close"
amzn$date <- dates
amzn <- amzn %>%
mutate(r = c(NA, (a_close[-1] - a_close[-length(a_close)]) / a_close[-length(a_close)])) %>%
na.omit()
head(amzn)
plot(amzn$r, type="l", ylab = "Daily returns")+
grid()
amzn %>%
ggplot(aes(x=r)) +
geom_histogram(aes(y=..density..)) +
geom_density() +
scale_x_continuous(breaks = seq(-0.2, 0.2, 0.05)) +
theme_economist_white()
qqnorm(amzn$r, pch=1, frame=TRUE)
qqline(amzn$r, col="blue", lwd=3)
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(
x = as.Date(date),
y = value,
group = name
)) +
geom_line() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
labs(x= "Date", y="") +
facet_grid("name", scales = "free", labeller = as_labeller(c("a_close"="Adj. Close",
"r"="Daily Return"))) +
theme_bw() +
theme(strip.text.y = element_text(angle=0))
r <- as.vector(amzn$r)
prior.conditions <- function(psi) {
(psi[1] > 0) & (psi[2] >= 0) & (psi[3] >= 0) &
(psi[2] + psi[3] < 1)
}
s_0 <- 12500 # Burn-in
s_1 <- 12500
s <- s_0 + s_1
MCMC <-
bayesGARCH(r,
control = list(
n.chain = 2,
l.chain = s,
refresh = 2500,
digits = 5 #, addPriorConditions = prior.conditions
))
plot(MCMC)
n.burn <- burnin(MCMC$chain1, "BMK")
n.burn
print(coda::gelman.diag(MCMC, autoburnin = 8000))
1 - coda::rejectionRate(MCMC)
coda::autocorr.diag(MCMC)
smpl <- formSmpl(MCMC, l.bi = 5000,
batch.size = 2)
summary(smpl)
coda::autocorr.diag(smpl)
persistence <- unclass(smpl[, 2] + smpl[, 3])
hist(persistence)
median(persistence)
print(coda::gelman.diag(MCMC, autoburnin = 12500))
1 - coda::rejectionRate(MCMC)
coda::autocorr.diag(MCMC)
smpl <- formSmpl(MCMC, l.bi = 5000,
batch.size = 2)
smpl <- formSmpl(MCMC, l.bi = 12500,
batch.size = 2)
summary(smpl)
persistence <- unclass(smpl[, 2] + smpl[, 3])
hist(persistence)
median(persistence)
ESS(MCMc)
ESS(MCMC)
l1 = c(2, 0, 0, 0, -1 , -1)
l2 = c(0, 2, 0, -1, 1)
l3 = c(0, 0, 2, 3, -1)
l1 = c(2, 0, 0, -1, -1)
rbind(l1, l2, l3)
mat <- rbind(l1, l2, l3)
solve(mat)
matrix(c(2, 0, 0, -1, -1, 0, 0, 2, 0, -1, 1, 0, 0, 0, 2, 3, -1, 0, 1, 1, -3, 0, 0, -7, 1, -1, 1, 0, 0, 3), nrow=3, ncol=6, byrow=TRUE)
matrix(c(2, 0, 0, -1, -1, 0, 0, 2, 0, -1, 1, 0, 0, 0, 2, 3, -1, 0, 1, 1, -3, 0, 0, -7, 1, -1, 1, 0, 0, 3), nrow=5, ncol=6, byrow=TRUE)
mat <- matrix(c(2, 0, 0, -1, -1, 0, 0, 2, 0, -1, 1, 0, 0, 0, 2, 3, -1, 0, 1, 1, -3, 0, 0, -7, 1, -1, 1, 0, 0, 3), nrow=5, ncol=6, byrow=TRUE)
pracma::rref(mat)
