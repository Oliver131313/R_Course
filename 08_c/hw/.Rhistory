prob = c(3 / 4, 1 / 4),
replace = TRUE
)
spravne <- sum(odpovede)
if (spravne < so) {
spravil <- FALSE
n <- n + 1
}
else if (spravne >= so)
spravil <- TRUE
}
return(spravil)
}
# call
S <- 10000
vysledok <- 0
for (s in 1:10000) {
vysledok <- vysledok + testy()
}
freq <- vysledok / S
print(freq)
## Mam to spravne, ale da sa to spravit omnhoo efektivnejsie - UCITELOVO RIESENIE
jeden_test <- function(otazek)
sum(sample(
0:1,
size = otazek,
replace = TRUE,
prob = c(3 / 4, 1 / 4)
))
# pomocí starého replicate()
testy <- function(otazek, opakovani)
max(replicate(opakovani, jeden_test(otazek)))
# totéž pomocí purrr
testy <- function(otazek, opakovani)
max(map_int(seq_len(opakovani), ~ jeden_test(otazek)))
# mean(replicate(1e4, testy(50, 3)) >= 30)  # pomocí starého replicate
freq <- mean(map(1:1e4, ~ testy(50, 3)) >= 30)  # totéž pomocí purrr
print(freq)
# Ukol 2
jeden_test <- function(otazek, pozna)
sum(sample(
0:1,
size = otazek,
replace = TRUE,
prob = c(3 / 4, 1 / 4)
)) +
as.integer(pozna)
# ! Pozor musel som zmenit map_int na map_dbl lebo to robilo problemy !
testy <- function(otazek, opakovani, pozna)
max(map_dbl(seq_len(opakovani), ~ jeden_test(otazek, pozna)))
# Simuluj
pozna_o <- function(otazek, opakovani, pozna, n = 1e4)
mean(map(n, ~ testy(otazek, opakovani, pozna)) >= 30L)
#mean(replicate(n, testy(otazek, opakovani, pozna)) >= 30)
pozna_seq <- 0:50
pozna_p <- map_dbl(pozna_seq, ~ pozna_o(50, 3, .))
plot(pozna_seq, pozna_p, type = "l")
# Ukol 3
print(min(pozna_seq[pozna_p >= 0.05]))
print(min(pozna_seq[pozna_p >= 0.5]))
########################################################################################
#                                   Total Brutal
info_vector <- function(vec, what) {
map(what, vec)
}
? map
map(mean, c(c(1,2,3), c(4, 5,6)))
map(c(c(1,2,3), c(4, 5,6)), ~mean)
map(c(c(1,2,3), c(4, 5,6)), ~mean(.))
map(c(c(1,2,3), c(4, 5,6)), ~c(mean(.), median(.))
pri
map(c(c(1,2,3), c(4, 5,6)), ~c(mean(.), median(.)))
list(mean, median)
f <- list(mean, meadian)
f <- list(mean, median)
map(list, ~.(c(1, 2, 3)))
print(f(vec))
vec <- c(1, 2, 3)
for (f in what){
print(f(vec))
}
what <- list(mean, median)
vec <- c(1, 2, 3)
for (f in what){
print(f(vec))
}
info_vector <- function(vec, what) {
vecout <- c()
for (f in what) {
append(vecout, f(vec))
}
return(vecout)
}
info_vector(c(1, 2, 3), list(mean, median))
what <- list(mean, median)
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
append(vecout, f(vec))
}
vecout
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
}
what <- list(mean, median)
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
vecout <- c(vecout, vec)
}
vecout
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
vecout <- c(vecout, f(vec))
}
vecout
info_vector <- function(vec, what) {
vecout <- c()
for (f in what) {
vecout <- c(vecout, f(vec))
}
return(vecout)
}
info_vector(c(1, 2, 3), list(mean, median))
map(names(mpg), info_vector(mpg$., what))
map(names(mpg), ~info_vector(mpg$., what))
map(names(mpg), ~info_vector(mpg$x, what))
med_col <- c()
for (col in names(mpg)) {
c(med_col, info_vector(mpg$col, list(median))
}
med_col <- c()
for (col in names(mpg)) {
c(med_col, info_vector(mpg$col, list(median)))
}
med_col
class(mpg$manufacturer)
mpg$manufacturer
class(as.vecto(mpg$manufacturer))
class(as.vector(mpg$manufacturer))
class(c(1, 2, 3))
is.vector(as.vector(mpg$manufacturer))
med_col <- c()
for (col in names(mpg)) {
print(c(med_col, info_vector(mpg$col, list(median))))
}
med_col <- c()
for (col in names(mpg)) {
print(c(med_col, info_vector(mpg$col, list(mean, median))))
}
med_col <- c()
for (col in names(mpg)) {
if (class(mpg$col) == "character")
print(c(med_col, NA))
else
print(c(med_col, info_vector(mpg$col, list(mean, median))))
}
? rep
? dplyr::bind_rows
info <- function(df, ...) {
info_vector <- function(vec, what) {
if (!is.numeric(vec))
return(rep(NA_real_, length(what)))
else
map_dbl(what, ~.(vec))
}
print(map(df, info_vector, what))
what <- list(...)
res <- dplyr::bind_rows(map(df, info_vector, what))
tibble::as_tibble(cbind(stat = names(what), res))
}
print(map(df, info_vector, what))
info_vector <- function(vec, what) {
if (!is.numeric(vec))
return(rep(NA_real_, length(what)))
else
map_dbl(what, ~.(vec))
}
info(mpg, what=list(mean, median, modus))
info(mpg, what=list(mean, median))
View(what)
View(what)
View(mpg)
View(mpg)
rm(list = ls())
a = matrix(c(7, -1, -2, 15), 2, 2, TRUE)
a
b = matrix(c(14, 7, 14, -12), 2, 2, TRUE)
c = matrix(c(10, 4, 8, 2, 0, 4, 8, 5), 2, 4, TRUE)
c
(-a + 2b)*c
(-a + 2*b)*c
-a + 2*b
c * a
a * c
a * c.T
a * t(c)
c(t)
t(c)
a %*% c
x_1 = (-a + 2*b)
x_1 %*% c
x_1
21*4+15*4
21*2+5*-39
21*2+15*5
a*b*c
a%*%b%*%c
(a)%*%b%*%c == (a%*%b)%*%c
t(a%*%c)
t(c) %*% t(a)
t(c) * c
t(c) %*% c
c %*% t(c)
I <- matrix(rep(1, 8), 4, 2)
I
diag(1, 2, 4)
c * diag(1, 2, 4)
diag(1, 2, 4) * c
c %*% diag(1, 2, 4)
A = matrix(c(3,4,3),c(4,8,6),c(3,6,9), TRUE)
A
A = matrix(c(c(3,4,3),c(4,8,6),c(3,6,9)), byrow=TRUE)
A
A = matrix(c(c(4, 12 ,-16),c(12, 37, -43),c(-16, -43, 98)), 3, 3, byrow=TRUE)
A
A.chol <- chol(A)
t(A.chol)
is.positive.definite(A)
install.packages("matrixcalc")
matrixcalc::is.positive.definite(A)
determinant(A)
det(A.chol)
det(A.chol[1:2, 1:2])
library(matrixcalc)
trace(matrix(c(1, 0, 1, 0, 1, 1, 1, 1, 2), 3, 3))
matrix(c(1, 0, 1, 0, 1, 1, 1, 1, 2), 3, 3)
mat = matrix(c(1, 0, 1, 0, 1, 1, 1, 1, 2), 3, 3)
trace(mat)
matrix.trace(mat)
? matrixcalc
?? matrixcalc
is.positive.semi.definite(mat)
eigenvalue(mat)
eigen(mat)
install.packages(c("conquer", "fda", "gert", "glue", "mclust", "nloptr", "parallelly", "RcppArmadillo", "readr", "rio", "sf", "sp", "tibble", "uuid", "vroom", "xfun"))
# load data
load("hw08.RData")
setwd("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/08_c/hw")
# Homework: dplyr
# =====================================================
# Goal: Make it tidy!
# clear workspace
rm(list = ls())
# load data
load("hw08.RData")
CZSO
CZSO[1]
library(tidyverse)
map(CZSO, ~rbind(.))
map(CZSO, ~mean(.))
for (i in 2:length(CZSO){})
for (i in 2:length(CZSO){
CZSO <- rbind(CZSO[i-1], CZSO[i])
})
for (i in 2:length(CZSO)) CZSO <- rbind(CZSO[i-1], CZSO[i])
library(tidyverse)
# load data
load("hw08.RData")
length(CZSO)
# load data
load("hw08.RData")
class(CZSO)
reduce(CZSO, merge, by = "A", all = TRUE)
? reduce
reduce(CZSO)
reduce(CZSO, rbind)
CZSO %>% reduce(rbind)
5 != 5
5 ~=5
czso_table %>%
mutate(year = as.integer(year)) %>%
filter(year >= 1991 & year <= 2010 & city_id != "5")
# 1. Create one table from list of tables in CZSO
czso_table <- CZSO %>% reduce(rbind)
czso_table %>%
mutate(year = as.integer(year)) %>%
filter(year >= 1991 & year <= 2010 & city_id != "5")
czso_table %>%
mutate(year = as.integer(year)) %>%
filter(year >= 1991 & year <= 2010 & !str_detect(city_id, pattern = "^5"))
str_detect(c(5, 1), "^5")
str_detect(c(5, 15), "^5")
czso_table_step1 %>%
group_by(city_id) %>%
summarise(mort_rate = mean(mort/pop_b),
pop_b = mean(pop_b)) %>%
ungroup()
# 2. Filter observations
czso_table_step1 <- czso_table %>%
mutate(year = as.integer(year)) %>%
filter(year >= 1991 & year <= 2010 & !str_detect(city_id, pattern = "^5"))
czso_table_step1 %>%
group_by(city_id) %>%
summarise(mort_rate = mean(mort/pop_b),
pop_b = mean(pop_b)) %>%
ungroup()
# 2. Filter observations
czso_table_step1 <- czso_table %>%
mutate(year = as.integer(year)) %>%
filter(year >= 1991 & year <= 2010 & str_detect(city_id, pattern = "^5"))
# 3. Get average mortality rate and population size at settlement level
czso_table_step2 <-czso_table_step1 %>%
group_by(city_id) %>%
summarise(mort_rate = mean(mort/pop_b),
pop_b = mean(pop_b)) %>%
ungroup()
czso_table_step2
czso_table_step2 %>% filter(city_id == "582352")
? cut
czso_table_step3 <- czso_table_step2 %>%
mutate(city_pop_cat = cut(
pop_b,
breaks = c(0, 1000, 10000),
include.lowest = TRUE,
right = TRUE,
labels = c("male", "stredne", "velke")
)) %>%
group_by(city_pop_cat) %>%
summarise(mort_rate_mean = mean(mort / pop_b),
mort_rate_sd = sd(mort / pop_b)
czso_table_step3
# 4. Get aggregates for settlement categories
czso_table_step3 <- czso_table_step2 %>%
mutate(city_pop_cat = cut(
pop_b,
breaks = c(0, 1000, 10000),
include.lowest = TRUE,
right = TRUE,
labels = c("male", "stredne", "velke")
)) %>%
group_by(city_pop_cat) %>%
summarise(mort_rate_mean = mean(mort / pop_b),
mort_rate_sd = sd(mort / pop_b))
# 4. Get aggregates for settlement categories
czso_table_step3 <- czso_table_step2 %>%
mutate(city_pop_cat = cut(
pop_b,
breaks = c(0, 1000),
include.lowest = TRUE,
right = TRUE,
labels = c("male", "stredne", "velke")
)) %>%
group_by(city_pop_cat) %>%
summarise(mort_rate_mean = mean(mort / pop_b),
mort_rate_sd = sd(mort / pop_b))
# 4. Get aggregates for settlement categories
czso_table_step3 <- czso_table_step2 %>%
mutate(city_pop_cat = cut(
pop_b,
breaks = c(0, 1000. 10000, 2e6),
include.lowest = TRUE,
right = TRUE,
labels = c("male", "stredne", "velke")
)) %>%
group_by(city_pop_cat) %>%
summarise(mort_rate_mean = mean(mort / pop_b),
mort_rate_sd = sd(mort / pop_b))
# 4. Get aggregates for settlement categories
czso_table_step3 <- czso_table_step2 %>%
mutate(city_pop_cat = cut(
pop_b,
breaks = c(0, 1000, 10000, 2e6),
include.lowest = TRUE,
right = TRUE,
labels = c("male", "stredne", "velke")
)) %>%
group_by(city_pop_cat) %>%
summarise(mort_rate_mean = mean(mort / pop_b),
mort_rate_sd = sd(mort / pop_b))
# 4. Get aggregates for settlement categories
czso_table_step3 <- czso_table_step2 %>%
mutate(city_pop_cat = cut(
pop_b,
breaks = c(0, 1000, 10000, 2e6),
include.lowest = TRUE,
right = TRUE,
labels = c("male", "stredne", "velke")
)) %>%
group_by(city_pop_cat) %>%
summarise(mort_rate_mean = mean(mort_rate),
mort_rate_sd = sd(mort_rate))
czso_table_step3
# 4. Get aggregates for settlement categories
czso_table_step3 <- czso_table_step2 %>%
mutate(city_pop_cat = cut(
pop_b,
breaks = c(0, 1000, 10000, 2e6),
include.lowest = TRUE,
right = TRUE,
labels = c("male", "stredne", "velke")
)) %>%
group_by(city_pop_cat) %>%
summarise(mort_rate_mean = mean(mort_rate, na.rm=TRUE),
mort_rate_sd = sd(mort_rate, na.rm = TRUE))
czso_table_step3
# 4. Get aggregates for settlement categories
czso_table_step3 <- czso_table_step2 %>%
mutate(city_pop_cat = cut(
pop_b,
breaks = c(0, 1000, 10000, 2e6),
include.lowest = TRUE,
right = TRUE,
labels = c("male", "stredne", "velke")
)) %>%
group_by(city_pop_cat) %>%
summarise(mort_rate_mean = mean(mort_rate, na.rm=TRUE),
mort_rate_sd = sd(mort_rate, na.rm = TRUE)) %>%
ungroup()
czso_table_step3
# 1. Create one table from list of tables in CZSO
czso_table <- CZSO %>% reduce(rbind)
czso_table
# 2. Filter observations
czso_table_step1 <- czso_table %>%
mutate(year = as.integer(year)) %>%
filter(year >= 1991 &
year <= 2010 & str_detect(city_id, pattern = "^5"))
czso_table_step1
# 3. Get average mortality rate and population size at settlement level
czso_table_step2 <- czso_table_step1 %>%
group_by(city_id) %>%
summarise(mort_rate = mean(mort / pop_b),
pop_b = mean(pop_b)) %>%
ungroup()
czso_table_step2
# 3. Get average mortality rate and population size at settlement level
czso_table_step2 <- czso_table_step1 %>%
group_by(city_id) %>%
summarise(mort_rate = mean(mort / pop_b, na.rm=TRUE),
pop_b = mean(pop_b, na.rm=TRUE)) %>%
ungroup()
czso_table_step2
# 4. Get aggregates for settlement categories
czso_table_step3 <- czso_table_step2 %>%
mutate(city_pop_cat = cut(
pop_b,
breaks = c(0, 1000, 10000, 2e6),
include.lowest = TRUE,
right = TRUE,
labels = c("male", "stredne", "velke")
)) %>%
group_by(city_pop_cat) %>%
summarise(mort_rate_mean = mean(mort_rate, na.rm=TRUE),
mort_rate_sd = sd(mort_rate, na.rm = TRUE)) %>%
ungroup()
czso_table_step3
# Save the solution
save(czso_table,
czso_table_step1,
czso_table_step2,
czso_table_step3,
file = "results.RData")
# Homework: dplyr
# =====================================================
# Goal: Make it tidy!
# clear workspace
rm(list = ls())
# load data
load("hw08.RData")
library(tidyverse)
# 1. Create one table from list of tables in CZSO
czso_table <- CZSO %>% reduce(rbind)
czso_table
# 2. Filter observations
czso_table_step1 <- czso_table %>%
mutate(year = as.integer(year)) %>%
filter(year >= 1991 &
year <= 2010 & str_detect(city_id, pattern = "^5"))
czso_table_step1
# 3. Get average mortality rate and population size at settlement level
czso_table_step2 <- czso_table_step1 %>%
group_by(city_id) %>%
summarise(mort_rate = mean(mort / pop_b, na.rm=TRUE),
pop_b = mean(pop_b, na.rm=TRUE)) %>%
ungroup()
czso_table_step2
# 4. Get aggregates for settlement categories
czso_table_step3 <- czso_table_step2 %>%
mutate(city_pop_cat = cut(
pop_b,
breaks = c(0, 1000, 10000, 2e6),
include.lowest = TRUE,
right = TRUE,
labels = c("male", "stredne", "velke")
)) %>%
group_by(city_pop_cat) %>%
summarise(mort_rate_mean = mean(mort_rate, na.rm=TRUE),
mort_rate_sd = sd(mort_rate, na.rm = TRUE)) %>%
ungroup()
czso_table_step3
# Save the solution
save(czso_table,
czso_table_step1,
czso_table_step2,
czso_table_step3,
file = "results.RData")
