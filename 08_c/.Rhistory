for (f in what){
append(vecout, f(vec))
}
vecout
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
}
what <- list(mean, median)
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
vecout <- c(vecout, vec)
}
vecout
vec <- c(1, 2, 3)
vecout <- c()
for (f in what){
print(f(vec))
vecout <- c(vecout, f(vec))
}
vecout
info_vector <- function(vec, what) {
vecout <- c()
for (f in what) {
vecout <- c(vecout, f(vec))
}
return(vecout)
}
info_vector(c(1, 2, 3), list(mean, median))
map(names(mpg), info_vector(mpg$., what))
map(names(mpg), ~info_vector(mpg$., what))
map(names(mpg), ~info_vector(mpg$x, what))
med_col <- c()
for (col in names(mpg)) {
c(med_col, info_vector(mpg$col, list(median))
}
med_col <- c()
for (col in names(mpg)) {
c(med_col, info_vector(mpg$col, list(median)))
}
med_col
class(mpg$manufacturer)
mpg$manufacturer
class(as.vecto(mpg$manufacturer))
class(as.vector(mpg$manufacturer))
class(c(1, 2, 3))
is.vector(as.vector(mpg$manufacturer))
med_col <- c()
for (col in names(mpg)) {
print(c(med_col, info_vector(mpg$col, list(median))))
}
med_col <- c()
for (col in names(mpg)) {
print(c(med_col, info_vector(mpg$col, list(mean, median))))
}
med_col <- c()
for (col in names(mpg)) {
if (class(mpg$col) == "character")
print(c(med_col, NA))
else
print(c(med_col, info_vector(mpg$col, list(mean, median))))
}
? rep
? dplyr::bind_rows
info <- function(df, ...) {
info_vector <- function(vec, what) {
if (!is.numeric(vec))
return(rep(NA_real_, length(what)))
else
map_dbl(what, ~.(vec))
}
print(map(df, info_vector, what))
what <- list(...)
res <- dplyr::bind_rows(map(df, info_vector, what))
tibble::as_tibble(cbind(stat = names(what), res))
}
print(map(df, info_vector, what))
info_vector <- function(vec, what) {
if (!is.numeric(vec))
return(rep(NA_real_, length(what)))
else
map_dbl(what, ~.(vec))
}
info(mpg, what=list(mean, median, modus))
info(mpg, what=list(mean, median))
View(what)
View(what)
View(mpg)
View(mpg)
rm(list = ls())
a = matrix(c(7, -1, -2, 15), 2, 2, TRUE)
a
b = matrix(c(14, 7, 14, -12), 2, 2, TRUE)
c = matrix(c(10, 4, 8, 2, 0, 4, 8, 5), 2, 4, TRUE)
c
(-a + 2b)*c
(-a + 2*b)*c
-a + 2*b
c * a
a * c
a * c.T
a * t(c)
c(t)
t(c)
a %*% c
x_1 = (-a + 2*b)
x_1 %*% c
x_1
21*4+15*4
21*2+5*-39
21*2+15*5
a*b*c
a%*%b%*%c
(a)%*%b%*%c == (a%*%b)%*%c
t(a%*%c)
t(c) %*% t(a)
t(c) * c
t(c) %*% c
c %*% t(c)
I <- matrix(rep(1, 8), 4, 2)
I
diag(1, 2, 4)
c * diag(1, 2, 4)
diag(1, 2, 4) * c
c %*% diag(1, 2, 4)
A = matrix(c(3,4,3),c(4,8,6),c(3,6,9), TRUE)
A
A = matrix(c(c(3,4,3),c(4,8,6),c(3,6,9)), byrow=TRUE)
A
A = matrix(c(c(4, 12 ,-16),c(12, 37, -43),c(-16, -43, 98)), 3, 3, byrow=TRUE)
A
A.chol <- chol(A)
t(A.chol)
is.positive.definite(A)
install.packages("matrixcalc")
matrixcalc::is.positive.definite(A)
determinant(A)
det(A.chol)
det(A.chol[1:2, 1:2])
library(matrixcalc)
trace(matrix(c(1, 0, 1, 0, 1, 1, 1, 1, 2), 3, 3))
matrix(c(1, 0, 1, 0, 1, 1, 1, 1, 2), 3, 3)
mat = matrix(c(1, 0, 1, 0, 1, 1, 1, 1, 2), 3, 3)
trace(mat)
matrix.trace(mat)
? matrixcalc
?? matrixcalc
is.positive.semi.definite(mat)
eigenvalue(mat)
eigen(mat)
install.packages(c("conquer", "fda", "gert", "glue", "mclust", "nloptr", "parallelly", "RcppArmadillo", "readr", "rio", "sf", "sp", "tibble", "uuid", "vroom", "xfun"))
setwd("C:/Users/kutis/OneDrive/School/1. Semester/Analýza a vizualizace ekonomickych dat v R/08_c")
VGAMdata::only12
install.packages("VGAMdata")
only <- as.tibble(VGAMdata::only12)
only <- as_tibble(VGAMdata::only12)
library(tidyverse)
only <- as_tibble(VGAMdata::only12)
only <- as_tibble(VGAMdata::oly12)
oly <- as_tibble(VGAMdata::oly12)
oly
str_detect(oly$sport, ",")
str_detect(oly$Sport, ",")
str_match(oly$Sport, ",")
oly %>%
filter(!str_detect(Sport, ",") & complete.cases(Sport))
oly %>%
filter(!str_detect(Sport, ",") & complete.cases(Sport)) == oly %>% filter(!str_detect(Sport, ",")) %>% drop_na(Height, Weight, Sex)
oly %>%
filter(!str_detect(Sport, ",")) %>%
drop_na(Height, Weight, Sex)
oly %>%
filter(!str_detect(Sport, ",")) %>%
drop_na(Height, Weight, Sex) %>%
mutate(bmi = weight / (height^2)*100) %>%
max(bmi, 5)
oly %>%
filter(!str_detect(Sport, ",")) %>%
drop_na(Height, Weight, Sex) %>%
mutate(bmi = Weight / (Height^2)*100) %>%
max(bmi, 5)
oly %>%
filter(!str_detect(Sport, ",")) %>%
drop_na(Height, Weight, Sex) %>%
mutate(bmi = Weight / (Height^2)*100) %>%
filter(Sex = "M") %>%
arrange(bmi)
oly %>%
filter(!str_detect(Sport, ",")) %>%
drop_na(Height, Weight, Sex) %>%
mutate(bmi = Weight / (Height^2)*100) %>%
filter(Sex == "M") %>%
arrange(bmi)
oly %>%
group_by(Sport) %>%
summarize(mean_weight = mean(Weight))
oly %>%
group_by(Sport, Sex) %>%
summarize(mean_weight = mean(Weight))
# Na zahrati
oly <- oly %>%
filter(!str_detect(Sport, ",")) %>%
drop_na(Height, Weight, Sex) %>%
mutate(bmi = Weight / (Height^2)*100)
oly %>%
filter(Sex == "M") %>%
arrange(bmi)
oly %>%
group_by(Sport, Sex) %>%
summarize(mean_weight = mean(bmi))
# Na zahrati
oly <- oly %>%
filter(!str_detect(Sport, ",")) %>%
drop_na(Height, Weight, Sex) %>%
mutate(bmi = Weight / (Height^2))
oly %>%
filter(Sex == "M") %>%
arrange(bmi)
oly %>%
group_by(Sport, Sex) %>%
summarize(mean_weight = mean(bmi))
arrange(desc(bmi))
oly %>%
group_by(Sport, Sex) %>%
summarize(mean_weight = mean(bmi)) %>%
arrange(desc(bmi))
# Na zahrati
oly <- oly %>%
filter(!str_detect(Sport, ",")) %>%
drop_na(Height, Weight, Sex) %>%
mutate(bmi = Weight / (Height^2))
oly %>%
filter(Sex == "M") %>%
arrange(bmi)
oly %>%
group_by(Sport, Sex) %>%
summarize(mean_weight = mean(bmi)) %>%
arrange(desc(bmi))
oly %>%
group_by(Sport, Sex) %>%
summarize(mean_weight = mean(bmi, na.rm=TRUE)) %>%
arrange(desc(bmi))
oly %>%
group_by(Sport, Sex) %>%
summarize(mean_weight = mean(bmi, na.rm=TRUE))
? arrange
oly %>%
group_by(Sport, Sex) %>%
summarize(mean_weight = mean(bmi, na.rm=TRUE)) %>%
arrange(Sport, by_group=TRUE)
oly %>%
group_by(Sport, Sex) %>%
summarize(mean_weight = mean(bmi, na.rm=TRUE)) %>%
arrange(Sport, by_group=TRUE) %>%
pivot_wider(names_from = Sex, values_from = meanBMI) %>%
select(-F) %>%
mutate(
projectedWeight = M*(1.75^2)
) %>%
arrange(M)
oly %>%
group_by(Sport, Sex) %>%
summarize(mean_weight = mean(bmi, na.rm=TRUE)) %>%
pivot_wider(names_from = Sex, values_from = meanBMI) %>%
select(-F) %>%
mutate(
projectedWeight = M*(1.75^2)
) %>%
arrange(M)
oly %>%
pivot_wider(names_from = Sex, values_from = meanBMI) %>%
select(-F) %>%
mutate(
projectedWeight = M*(1.75^2)
) %>%
arrange(M)
oly <- oly %>%
group_by(Sport, Sex) %>%
summarize(mean_bmi = mean(bmi, na.rm = TRUE)) %>%
arrange(Sport, by_group = TRUE)
oly <- oly %>%
group_by(Sport, Sex) %>%
summarize(mean_bmi = mean(bmi, na.rm = TRUE))
# clear workspace
rm(list = ls())
library(tidyverse)
oly <- as_tibble(VGAMdata::oly12)
# Na zahrati
oly <- oly %>%
filter(!str_detect(Sport, ",")) %>%
drop_na(Height, Weight, Sex) %>%
mutate(bmi = Weight / (Height ^ 2))
oly %>%
filter(Sex == "M") %>%
arrange(bmi)
oly <- oly %>%
group_by(Sport, Sex) %>%
summarize(mean_bmi = mean(bmi, na.rm = TRUE))
oly %>%
pivot_wider(names_from = Sex, values_from = meanBMI) %>%
select(-F) %>%
mutate(projectedWeight = M * (1.75 ^ 2)) %>%
arrange(M)
oly %>%
pivot_wider(names_from = Sex, values_from = mean_bmi) %>%
select(-F) %>%
mutate(projectedWeight = M * (1.75 ^ 2)) %>%
arrange(M)
oly %>%
pivot_wider(names_from = Sex, values_from = mean_bmi) %>%
select(-F) %>%
mutate(projectedWeight = M * (1.78 ^ 2)) %>%
arrange(M)
# CVICENI 1: Privatizace a Resistuce v CR
load("dplyr_exercise_01.RData")
View(domy)
View(domy)
View(privatizace)
View(privatizace)
? left_join
left_join(privatizace, domy, by="IDOB", suffix=c("_p", "_d"))
left_join(privatizace, domy, by="LIDAMSIDOB", suffix=c("_p", "_d"))
left_join(privatizace, domy, by=c("LIDAMSIDOB", "IDOB"), suffix=c("_p", "_d"))
domy
left_join(privatizace, domy, by=c("LIDAMSIDOB"="IDOB"), suffix=c("_p", "_d"))
left_join(privatizace, by=c("LIDAMSIDOB"="IDOB"), suffix=c("_p", "_d"))
step_01 <- domy %>%
mutate(LIDAMSIDOB = as.character(LIDAMSIDOB)) %>%
left_join(privatizace, by=c("LIDAMSIDOB"="IDOB"), suffix=c("_p", "_d"))
step_01
? unique
step_01 %>% unique(kod91_vlast)
View(step_01)
View(step_01)
? case_when
step_01 %<% filter(kod91_vlast == TRUE)
step_01 %>% filter(kod91_vlast == TRUE)
step_01 %>% filter(kod91_vlast == TRUE) %>% select(kod91_vlast, everything())
# CVICENI 2: Census v otevrenych datech CSU
census <- read_delim("SLDB_OBYVATELSTVO_2011.CSV")
census
census %>% filter(typuz_naz == "obec") %>%
pivot_longer(-c(typuz_naz, nazev, uzcis, uzkod), values_to="unemp")
census %>% filter(typuz_naz == "obec") %>%
mutate(
u_rate = vse6181/vse6111
)
# CVICENI 2: Census v otevrenych datech CSU
census <- read_delim("SLDB_OBYVATELSTVO_2011.CSV")
census %>% filter(typuz_naz == "obec") %>%
mutate(
u_rate = vse6181/vse6111
)
census
census <- census %>%
mutate(
KOD_OBEC = as.character(uzkod)
) %>%
left_join(.,tabulka_obci, by = "KOD_OBEC") %>%
mutate(
pop_category = cut(vse1111,
breaks = c(0,1000,2e6),
include.lowest = TRUE,
right = TRUE,
labels = c("malé","ostatní"))
# Alternativně můžete použít například case_when() nebo ifelse()
) %>%
group_by(KOD_KRAJ,pop_category) %>%
summarise(
min = min(u_rate, na.rm = TRUE),
mean = mean(u_rate, na.rm = TRUE),
max = max(u_rate, na.rm = TRUE)
)
load("tabulka_obci.RData")
census <- census %>%
mutate(
KOD_OBEC = as.character(uzkod)
) %>%
left_join(.,tabulka_obci, by = "KOD_OBEC") %>%
mutate(
pop_category = cut(vse1111,
breaks = c(0,1000,2e6),
include.lowest = TRUE,
right = TRUE,
labels = c("malé","ostatní"))
# Alternativně můžete použít například case_when() nebo ifelse()
) %>%
group_by(KOD_KRAJ,pop_category) %>%
summarise(
min = min(u_rate, na.rm = TRUE),
mean = mean(u_rate, na.rm = TRUE),
max = max(u_rate, na.rm = TRUE)
)
census <- census %>% filter(typuz_naz == "obec") %>%
# V %
mutate(u_rate = vse6181 / vse6111 * 100)
census <- census %>%
mutate(
KOD_OBEC = as.character(uzkod)
) %>%
left_join(.,tabulka_obci, by = "KOD_OBEC") %>%
mutate(
pop_category = cut(vse1111,
breaks = c(0,1000,2e6),
include.lowest = TRUE,
right = TRUE,
labels = c("malé","ostatní"))
# Alternativně můžete použít například case_when() nebo ifelse()
) %>%
group_by(KOD_KRAJ,pop_category) %>%
summarise(
min = min(u_rate, na.rm = TRUE),
mean = mean(u_rate, na.rm = TRUE),
max = max(u_rate, na.rm = TRUE)
)
cesnus
census
wiid
# CVICENI 3: WIID data
wiid <- read_tsv("WIID_ver3_sept15_0.tsv")
wiid
wiid <- wiid %>% select(Country, Year, Gini, Quality)
wiid
wiid <- wiid %>% select(Country, Year, Gini, Quality) %>%
mutate(Qual_fact = factor(Quality, levels=c("High", "Average", "Low"), ordered = TRUE)) %>%
group_by(Country) %>%
max(Qual_fact)
wiid <- wiid %>% select(Country, Year, Gini, Quality) %>%
mutate(Quality %>% factor(
Quality,
levels = c("High", "Average", "Low", "Not known"),
ordered = TRUE
)) %>%
group_by(Country) %>%
max(Quality)
wiid <- wiid %>% select(Country, Year, Gini, Quality) %>%
mutate(Quality %>% factor(
Quality,
labels = c("High", "Average", "Low", "Not known"),
)) %>%
group_by(Country) %>%
max(Quality)
# CVICENI 3: WIID data
wiid <- read_tsv("WIID_ver3_sept15_0.tsv")
wiid <- wiid %>% select(Country, Year, Gini, Quality) %>%
mutate(Quality %>% factor(
Quality,
labels = c("High", "Average", "Low", "Not known"),
)) %>%
group_by(Country) %>%
max(Quality)
wiid <- wiid %>% select(Country, Year, Gini, Quality) %>%
mutate(
Quality = Quality %>%  factor(levels = c("High","Average","Low","Not known"))
) %>%
arrange(Quality) %>%
drop_na(Gini) %>%
distinct(Country, Year, .keep_all = TRUE)
wiid
? arrange
? distinct
# 2. moznost - nezavisi na distinct
wiid <- read_tsv("WIID_ver3_sept15_0.tsv")
mutate(
wiid
Quality = Quality %>%  factor(levels = c("High","Average","Low","Not known"))
# Slice sluzi... no na slicing :D
slice(1L)
# 2. moznost - nezavisi na distinct
wiid <- read_tsv("WIID_ver3_sept15_0.tsv")
Quality = Quality %>%  factor(levels = c("High","Average","Low","Not known"))
wiid %>%
select(Country, Year, Gini, Quality) %>%
drop_na(Gini) %>%
group_by(Country, Year) %>%
mutate(
Quality = Quality %>%  factor(levels = c("High","Average","Low","Not known"))
) %>%
arrange(Quality, .by_group = TRUE) %>%
# Slice sluzi... no na slicing :D
slice(1L)
# 2. moznost - nezavisi na distinct
wiid <- read_tsv("WIID_ver3_sept15_0.tsv")
wiid <- wiid %>%
select(Country, Year, Gini, Quality) %>%
drop_na(Gini) %>%
group_by(Country, Year) %>%
mutate(
Quality = Quality %>%  factor(levels = c("High","Average","Low","Not known"))
) %>%
arrange(Quality, .by_group = TRUE) %>%
# Slice sluzi... no na slicing :D
slice(1L) %>%
ungroup()
wiid
# 2. moznost - nezavisi na distinct
wiid <- read_tsv("WIID_ver3_sept15_0.tsv")
wiid <- wiid %>%
select(Country, Year, Gini, Quality) %>%
drop_na(Gini) %>%
group_by(Country, Year) %>%
mutate(
Quality = Quality %>%  factor(levels = c("High","Average","Low","Not known"))
) %>%
arrange(Quality, .by_group = TRUE) %>%
# Slice sluzi... no na slicing :D
slice(1L) %>%
ungroup()
wiid
